/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package salesManager;

import java.io.*;
import java.util.*;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author User
 */
public class PurchaseRequisitionGUI extends javax.swing.JFrame {
    List<Item> itemList = new ArrayList<>();
    List<Supplier> supplierList = new ArrayList<>();
    List<PurchaseRequisition> PRList = new ArrayList<>();
    int editingRowIndex = 0;
    boolean isEditing = false;
    public PurchaseRequisitionGUI() {
        initComponents();
        jPanel1.setBackground(new java.awt.Color(0xc5e1ef));
        setLocationRelativeTo(null);
        txtDate.setText(java.time.LocalDate.now().toString());
        
        supplierList = Supplier.loadSupplierFromFile("supplier.txt");
        itemList = Item.loadItemFromFile("item.txt",supplierList);
        PRList = PurchaseRequisition.loadPRFromFile("purchase_requisition.txt", itemList, supplierList);
        DefaultTableModel pr = (DefaultTableModel) PRTable.getModel();
        pr.setRowCount(0);
        
        ComboItem.removeAllItems();
        ComboItem.addItem("-- Select Item --");
        for(Item item : itemList){
            ComboItem.addItem(item.getItemID() + " - " + item.getItemName());
        }
        makeTableReadOnly();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        PRTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        StockTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        ComboItem = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        txtquantity = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtDate = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtRaisedBy = new javax.swing.JTextField();
        viewAllBtn = new javax.swing.JButton();
        addPrBtn = new javax.swing.JButton();
        removeBtn = new javax.swing.JButton();
        editBtn = new javax.swing.JButton();
        saveBtn = new javax.swing.JButton();
        BackToMenuBtn = new java.awt.Button();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel1.setText("PURCHASE REQUISITION");

        PRTable.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        PRTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "PR ID", "Item Code", "Quantity", "Required Date", "Supplier ID", "Raised By"
            }
        ));
        jScrollPane1.setViewportView(PRTable);

        StockTable.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        StockTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Item ID", "Item Name", "Current Stock", "Supplier ID"
            }
        ));
        StockTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                StockTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(StockTable);

        jLabel2.setText(" üìãÔ∏è PURCHSE REQUISITION TABLE");

        jLabel3.setText("‚ö†Ô∏è  LOW STOCK ITEMS TABLE");

        jLabel4.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel4.setText("Item: ");

        ComboItem.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        ComboItem.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel5.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel5.setText("Quantity");

        txtquantity.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N

        jLabel6.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel6.setText("Date");

        txtDate.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N

        jLabel7.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel7.setText("Raised By");

        txtRaisedBy.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N

        viewAllBtn.setText("VIEW ALL");
        viewAllBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewAllBtnActionPerformed(evt);
            }
        });

        addPrBtn.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        addPrBtn.setText("ADD PR");
        addPrBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPrBtnActionPerformed(evt);
            }
        });

        removeBtn.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        removeBtn.setText("REMOVE");
        removeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeBtnActionPerformed(evt);
            }
        });

        editBtn.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        editBtn.setText("EDIT");
        editBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editBtnActionPerformed(evt);
            }
        });

        saveBtn.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        saveBtn.setText("SAVE");
        saveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBtnActionPerformed(evt);
            }
        });

        BackToMenuBtn.setBackground(new java.awt.Color(255, 255, 255));
        BackToMenuBtn.setLabel("MENU");
        BackToMenuBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackToMenuBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(BackToMenuBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(158, 158, 158)
                        .addComponent(jLabel1)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane2)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(viewAllBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel5)
                                            .addComponent(jLabel6)
                                            .addComponent(jLabel7))
                                        .addGap(18, 18, 18)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(ComboItem, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(txtquantity)
                                            .addComponent(txtDate)
                                            .addComponent(txtRaisedBy, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(96, 96, 96)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(removeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(addPrBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(editBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(saveBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(0, 209, Short.MAX_VALUE)))
                        .addGap(42, 42, 42))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(BackToMenuBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(viewAllBtn))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(ComboItem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(txtquantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(txtRaisedBy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(addPrBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(editBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(removeBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(saveBtn)))
                .addGap(26, 26, 26))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void viewAllBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewAllBtnActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) PRTable.getModel();
        model.setRowCount(0);
        for (PurchaseRequisition pr : PRList) {
            if(pr.getStatus().equalsIgnoreCase("Pending")){
                Object[] row = {
                    pr.getPrId(),
                    String.format(pr.getItem().getItemID() + " - " + pr.getItem().getItemName()),
                    pr.getQuantity(),
                    pr.getRequiredDate(),
                    String.join(" | ", pr.getSupplierIds()),
                    pr.getRaisedBy()
                };
                model.addRow(row);
            }   
        }
    }//GEN-LAST:event_viewAllBtnActionPerformed

    private void addPrBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPrBtnActionPerformed
        // TODO add your handling code here:
        try {
            String prId = generateNextPrId();
            String itemId = ComboItem.getSelectedItem().toString().split("-")[0].trim();
            Item selectedItem = null;
            if (itemId.isEmpty() ||
                txtquantity.getText().isEmpty()||
                txtDate.getText().isEmpty() ||
                txtRaisedBy.getText().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please fill in all fields.");
                return; // stop the method here
            }
            for (Item i : itemList){
                if (i.getItemID().equalsIgnoreCase(itemId)){
                    selectedItem = i;
                }
            }
            if(selectedItem == null){
                JOptionPane.showMessageDialog(this,"Item not found.");
                return;
            }           
            List<Supplier> matchedSuppliers = new ArrayList();
            for(String sid : selectedItem.getSupplierids()){
                for(Supplier s : supplierList){
                    if(s.getSupplierId().equalsIgnoreCase(sid.trim())){
                        matchedSuppliers.add(s);
                        break;
                    }
                }
            }
            int quantity = Integer.parseInt(txtquantity.getText().trim());
            String requiredDate = txtDate.getText().trim();
            String raisedBy = txtRaisedBy.getText().trim();

            PurchaseRequisition newPr = new PurchaseRequisition(
                prId, selectedItem,matchedSuppliers, quantity, requiredDate, raisedBy,"Pending"
            );
            PRList.add(newPr);
            savePrToFile();
            JOptionPane.showMessageDialog(this, "PR Added Successfully.");
            viewAllBtnActionPerformed(null);  // refresh table
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Invalid input: " + e.getMessage());
        }
        clearInput();
    }//GEN-LAST:event_addPrBtnActionPerformed

    private void removeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = PRTable.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a PR to remove.");
            return;
        }
        int confirm = JOptionPane.showConfirmDialog(this,"Are you sure you want to delete the selected PR?","Confirm Deletion",JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            PRList.remove(selectedRow);
            savePrToFile();
            viewAllBtnActionPerformed(null);
        }
    }//GEN-LAST:event_removeBtnActionPerformed

    private void editBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = PRTable.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a PR to edit.");
            return;
        }

        PurchaseRequisition pr = PRList.get(selectedRow);
        ComboItem.setSelectedItem(pr.getItem().getItemID() + " - " + pr.getItem().getItemName());
        txtquantity.setText(String.valueOf(pr.getQuantity()));
        txtDate.setText(pr.getRequiredDate());
        txtRaisedBy.setText(pr.getRaisedBy());

        editingRowIndex = selectedRow;
        isEditing = true;
    }//GEN-LAST:event_editBtnActionPerformed

    private void saveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBtnActionPerformed
        // TODO add your handling code here:
        if (isEditing && editingRowIndex != -1) {
            PurchaseRequisition pr = PRList.get(editingRowIndex);
            // Update the PR fields
            pr.setQuantity(Integer.parseInt(txtquantity.getText().trim()));
            pr.setRequiredDate(txtDate.getText().trim());
            pr.setRaisedBy(txtRaisedBy.getText().trim());

            // (Optional) If item selection also changes:
            String selectedItem = ComboItem.getSelectedItem().toString();
            String selectedItemId = selectedItem.split("-")[0].trim();
            for (Item item : itemList) {
                if (item.getItemID().equalsIgnoreCase(selectedItemId)) {
                    pr.setItem(item);
                    List<Supplier> matchedSuppliers = new ArrayList();
                    for(String sid: item.getSupplierids()){
                        for(Supplier s : supplierList){
                            if(s.getSupplierId().equalsIgnoreCase(sid.trim())){
                                matchedSuppliers.add(s);
                                break;
                            }
                        }
                    }
                    pr.setSupplier(matchedSuppliers);
                    break;
                }
            }

            // Reset edit state
            isEditing = false;
            editingRowIndex = -1;
        }
        savePrToFile();
        clearInput();
        viewAllBtnActionPerformed(null);
        JOptionPane.showMessageDialog(this, "All PRs saved successfully.");
    }//GEN-LAST:event_saveBtnActionPerformed

    private void BackToMenuBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackToMenuBtnActionPerformed
        // TODO add your handling code here:
        SalesManagerMenu menu = new SalesManagerMenu();
        menu.setLocationRelativeTo(null); //center the window
        menu.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_BackToMenuBtnActionPerformed

    private void StockTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_StockTableMouseClicked
        // TODO add your handling code here:
        int selectedRow = StockTable.getSelectedRow();
        if(selectedRow != -1){
            DefaultTableModel model = (DefaultTableModel) StockTable.getModel();
            String itemId = model.getValueAt(selectedRow, 0).toString(); // Item ID
            String itemName = model.getValueAt(selectedRow, 1).toString(); // Item Name

            // Set combo selection to match "I001 - Apple"
            String comboLabel = itemId + " - " + itemName;
            for (int i = 0; i < ComboItem.getItemCount(); i++) {
                if (ComboItem.getItemAt(i).equalsIgnoreCase(comboLabel)) {
                    ComboItem.setSelectedIndex(i);
                    break;
                }
            }

            // Optionally, clear or suggest values for other fields
            txtquantity.setText("");
            txtDate.setText(java.time.LocalDate.now().toString());
        }
                
    }//GEN-LAST:event_StockTableMouseClicked

    private String generateNextPrId(){
        int max = 0;
        for(PurchaseRequisition pr : PRList){
            String id = pr.getPrId().substring(2);
            max = Math.max(max, Integer.parseInt(id));
        }
        return String.format("PR%03d", max + 1);
    }
    
    private void savePrToFile() {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter("purchase_requisition.txt"))) {
            for (PurchaseRequisition pr : PRList) {
                writer.write(pr.toString());
                writer.newLine();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return;
    }
    
    private ArrayList<Item> getLowStockItems(List<Item> itemList) {
        ArrayList<Item> lowStockItems = new ArrayList<>();
        for (Item item : itemList) {
            if (item.getStock() <= 20) {
                lowStockItems.add(item);
            }
        }
        return lowStockItems;
    }
    
    private void loadLowStockItemsToTable() {
        DefaultTableModel model = (DefaultTableModel) StockTable.getModel();
        model.setRowCount(0); // Clear previous rows

        List<Item> lowItems = getLowStockItems(itemList); // itemList must already be loaded
        for (Item item : lowItems) {
            Object[] row = {
                item.getItemID(),
                item.getItemName(),
                item.getStock(),
                String.join(";",item.getSupplierids())
            };
            model.addRow(row);
        }
    }
    
    private void clearInput(){
        ComboItem.setSelectedItem(0);
        txtquantity.setText("");
        txtRaisedBy.setText("");
    }
    
    private void makeTableReadOnly(){
        DefaultTableModel stockModel = new DefaultTableModel(
        new String[] { "Item ID", "Item Name", "Current Stock", "Supplier ID" }, 0
        ) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        StockTable.setModel(stockModel);
        StockTable.getTableHeader().setFont(new java.awt.Font("Times New Roman", java.awt.Font.BOLD, 14));
        loadLowStockItemsToTable();
        
        DefaultTableModel prModel = new DefaultTableModel(
        new String[] { "PR ID", "Item", "Quantity", "Required Date", "Supplier ID", "Raised By" }, 0
        ) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        PRTable.setModel(prModel);
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(javax.swing.JLabel.CENTER);

        for (int i = 0; i < StockTable.getColumnCount(); i++) {
            StockTable.getColumnModel().getColumn(i).setCellRenderer(centerRenderer);
        }
        for (int i = 0; i < PRTable.getColumnCount(); i++) {
            PRTable.getColumnModel().getColumn(i).setCellRenderer(centerRenderer);
        }
       
        PRTable.getTableHeader().setFont(new java.awt.Font("Times New Roman", java.awt.Font.BOLD, 14));
        
    }

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PurchaseRequisitionGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PurchaseRequisitionGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PurchaseRequisitionGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PurchaseRequisitionGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PurchaseRequisitionGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Button BackToMenuBtn;
    private javax.swing.JComboBox<String> ComboItem;
    private javax.swing.JTable PRTable;
    private javax.swing.JTable StockTable;
    private javax.swing.JButton addPrBtn;
    private javax.swing.JButton editBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton removeBtn;
    private javax.swing.JButton saveBtn;
    private javax.swing.JTextField txtDate;
    private javax.swing.JTextField txtRaisedBy;
    private javax.swing.JTextField txtquantity;
    private javax.swing.JButton viewAllBtn;
    // End of variables declaration//GEN-END:variables
}
