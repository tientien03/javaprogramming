package salesManager;

import main.FileWriterUtil;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author User
 */
public class SupplierManagementGUI extends javax.swing.JFrame {
    List<Supplier> supplierList = new ArrayList<>();
    List<Item> itemList = new ArrayList<>();
        public SupplierManagementGUI() {
            initComponents();
            getContentPane().setBackground(new java.awt.Color(0xc5e1ef));
            setLocationRelativeTo(null);
            supplierList = Supplier.loadSupplierFromFile("supplier.txt");
            itemList = Item.loadItemFromFile("item.txt",supplierList);
            System.out.println("Loaded suppliers: " + supplierList.size());
            txtSupplierId.setEditable(false);
            makeTableReadOnly();
            loadSuppliersToTable();       
        }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtSupplierEmail = new javax.swing.JTextField();
        txtSupplierPhoneNo = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        SupplierTable = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtSupplierName = new javax.swing.JTextField();
        txtSearch = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        SearchBtn = new javax.swing.JButton();
        BackToMenuBtn = new java.awt.Button();
        addbtn = new javax.swing.JButton();
        editBtn = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();
        resetBtn = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        txtSupplierId = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        txtSupplierEmail.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        txtSupplierEmail.setToolTipText("Supplier Email");

        txtSupplierPhoneNo.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("SUPPLIER MANAGEMENT");

        SupplierTable.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        SupplierTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Supplier ID", "Supplier Name", "Contact Number", "Email", "Supplies Item"
            }
        ));
        SupplierTable.setShowGrid(true);
        SupplierTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SupplierTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(SupplierTable);

        jLabel3.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel3.setText("Name");

        jLabel4.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel4.setText("Contact Number");

        jLabel5.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel5.setText("Email");

        txtSupplierName.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

        txtSearch.setBackground(new java.awt.Color(255, 255, 204));
        txtSearch.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

        jLabel6.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel6.setText("Search Supplier");

        SearchBtn.setBackground(java.awt.SystemColor.activeCaption);
        SearchBtn.setFont(new java.awt.Font("Times New Roman", 3, 13)); // NOI18N
        SearchBtn.setText("SEARCH");
        SearchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchBtnActionPerformed(evt);
            }
        });

        BackToMenuBtn.setBackground(new java.awt.Color(255, 255, 255));
        BackToMenuBtn.setLabel("MENU");
        BackToMenuBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackToMenuBtnActionPerformed(evt);
            }
        });

        addbtn.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        addbtn.setText("ADD");
        addbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addbtnActionPerformed(evt);
            }
        });

        editBtn.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        editBtn.setText("EDIT");
        editBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editBtnActionPerformed(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        jButton1.setText("SAVE");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        deleteBtn.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        deleteBtn.setText("DELETE");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        resetBtn.setBackground(new java.awt.Color(249, 231, 166));
        resetBtn.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        resetBtn.setText("RESET");
        resetBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetBtnActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel7.setText("Supplier ID");

        txtSupplierId.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel5))
                                .addGap(41, 41, 41)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(addbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(editBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(deleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(resetBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(txtSupplierPhoneNo, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 488, Short.MAX_VALUE)
                                        .addComponent(txtSupplierEmail, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(txtSupplierName))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(BackToMenuBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(180, 180, 180)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 354, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(27, 27, 27)
                                .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 488, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(SearchBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(49, 49, 49)
                                .addComponent(txtSupplierId, javax.swing.GroupLayout.PREFERRED_SIZE, 488, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 26, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(BackToMenuBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SearchBtn))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtSupplierId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtSupplierName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtSupplierPhoneNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtSupplierEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addbtn)
                    .addComponent(editBtn)
                    .addComponent(jButton1)
                    .addComponent(deleteBtn)
                    .addComponent(resetBtn))
                .addGap(18, 18, 18))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SearchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchBtnActionPerformed
        // TODO add your handling code here:
        String input = txtSearch.getText().split(" - ")[0];
        if (input.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter Supplier ID or Name to search.");
            return;
        }

        boolean found = false;
        for (Supplier s : supplierList) {
            if (s.getSupplierId().equalsIgnoreCase(input) || s.getSupplierName().equalsIgnoreCase(input)) {
            // Populate the fields
                txtSearch.setText(s.getSupplierId() + " - " + s.getSupplierName());
                txtSupplierId.setText(s.getSupplierId());
                txtSupplierName.setText(s.getSupplierName());
                txtSupplierPhoneNo.setText(s.getSupplierPhoneNo());
                txtSupplierEmail.setText(s.getSupplierEmail());
                found = true;
                break;
            }
        }
        txtSupplierId.setEditable(false);txtSupplierName.setEditable(false);txtSupplierPhoneNo.setEditable(false);txtSupplierEmail.setEditable(false);
        if (!found) {
            JOptionPane.showMessageDialog(this, "Supplier not found.");
        }  
    }//GEN-LAST:event_SearchBtnActionPerformed

    private void BackToMenuBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackToMenuBtnActionPerformed
        // TODO add your handling code here:
        SalesManagerMenu menu = new SalesManagerMenu();
        menu.setLocationRelativeTo(null); //center the window
        menu.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_BackToMenuBtnActionPerformed

    private void addbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addbtnActionPerformed
        // TODO add your handling code here:
        try{
            String newSupplierName = txtSupplierName.getText().trim();
            if(!newSupplierName.isEmpty()){
                newSupplierName = newSupplierName.toUpperCase();
            }
                
            String email = txtSupplierEmail.getText().trim();
            String phone = txtSupplierPhoneNo.getText().trim();
            
            // Email format: basic validation (e.g., name@domain.com)
            if (!email.matches("^[\\w.-]+@[\\w.-]+\\.[a-zA-Z]{2,6}$")) {
                JOptionPane.showMessageDialog(this, "Invalid email format.", "Input Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Phone format: digits only, between 8 to 15 digits
            if (!phone.matches("^(\\+?60|0)[0-9]{1,2}-?[0-9]{6,8}$")) {
                JOptionPane.showMessageDialog(this, "Invalid Phone Number format.\nAccept: e.g. 012-3456789 or +60-12-3456789", "Input Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
                
            boolean isDuplicate = false;
            for (Supplier supplier : supplierList){
                if(supplier.getSupplierName().equalsIgnoreCase(newSupplierName)){
                    isDuplicate = true;
                    break;
                }
            }
            if(isDuplicate){
                JOptionPane.showMessageDialog(null, "Supplier name already exists","Duplicate",JOptionPane.WARNING_MESSAGE);
            }else{
                String newSupplierID = String.format("S%03d", 
                        supplierList.stream()
                        .mapToInt(s -> Integer.parseInt(s.getSupplierId().substring(1)))
                        .max()
                        .orElse(0)+1);
                Supplier newSupplier = new Supplier(
                    newSupplierID,
                    newSupplierName,
                    txtSupplierPhoneNo.getText(),
                    txtSupplierEmail.getText());
                    supplierList.add(newSupplier);
                    FileWriterUtil.writeFile("supplier.txt",Supplier.convertToStringArrayList(supplierList));
                    loadSuppliersToTable();
                    JOptionPane.showMessageDialog(this, "Supplier added Successfully.");
                    System.out.println("New Supplier added.");
                }
                clearInput();
        }catch(Exception e){
            e.printStackTrace();
        }
    }//GEN-LAST:event_addbtnActionPerformed

    private void editBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editBtnActionPerformed
        // TODO add your handling code here:
        String editSupplier = txtSupplierName.getText().trim();
        DefaultTableModel model = (DefaultTableModel)SupplierTable.getModel();
        boolean found = false;
        for(int i=0; i<model.getRowCount();i++){
            if(model.getValueAt(i,1).toString().equalsIgnoreCase(editSupplier)){
                txtSupplierName.setText(model.getValueAt(i, 1).toString());
                txtSupplierPhoneNo.setText(model.getValueAt(i, 2).toString());
                txtSupplierEmail.setText(model.getValueAt(i, 3).toString());
                found = true;
                txtSearch.setEditable(false);txtSupplierName.setEditable(true);txtSupplierPhoneNo.setEditable(true);txtSupplierEmail.setEditable(true);
                break;
            }
        }
    }//GEN-LAST:event_editBtnActionPerformed

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = SupplierTable.getSelectedRow();
        
        if(selectedRow != -1){
            String findSupplier = txtSupplierName.getText().trim();
            if(findSupplier.isEmpty()){
                JOptionPane.showMessageDialog(this,"Please enter Supplier ID or Name to delete.");
                return;
            }
            boolean found = false;
            for (int i = 0; i < supplierList.size(); i++){
                Supplier s = supplierList.get(i);
                if (s.getSupplierId().equalsIgnoreCase(findSupplier) || s.getSupplierName().equalsIgnoreCase(findSupplier)) {
                   int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to remove this Supplier?","Confirm Delete",JOptionPane.YES_NO_OPTION);
                   if(confirm == JOptionPane.YES_OPTION){
                       String deletedSupplier = s.getSupplierId();
                        supplierList.remove(i);
                        for(Item item : itemList){
                            item.getSupplier().removeIf(sup -> sup.getSupplierId().equalsIgnoreCase(deletedSupplier));
                        }
                        FileWriterUtil.writeFile("item.txt",Item.convertToStringArrayList(itemList));
                        FileWriterUtil.writeFile("supplier.txt",Supplier.convertToStringArrayList(supplierList));
                        //clear input
                        loadSuppliersToTable();
                        clearInput();
                        setEnabled();
                        JOptionPane.showMessageDialog(this, "Supplier deleted successfully.");
                    } 
                    found = true;
                    break;
                }
            }
            if (!found){
                JOptionPane.showMessageDialog(this,"Supplier not found");
            }
        }
    }//GEN-LAST:event_deleteBtnActionPerformed

    private void SupplierTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SupplierTableMouseClicked
        // TODO add your handling code here:
        int selectedRow = SupplierTable.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) SupplierTable.getModel();
        if(selectedRow != -1){
            txtSearch.setText(model.getValueAt(selectedRow, 0).toString() + " - " + model.getValueAt(selectedRow, 1).toString());
             txtSupplierId.setText(model.getValueAt(selectedRow, 0).toString());
            txtSupplierName.setText(model.getValueAt(selectedRow, 1).toString());
            txtSupplierPhoneNo.setText(model.getValueAt(selectedRow, 2).toString());
            txtSupplierEmail.setText(model.getValueAt(selectedRow, 3).toString());
            txtSupplierName.setEditable(false);txtSupplierPhoneNo.setEditable(false);txtSupplierEmail.setEditable(false);
        } 
    }//GEN-LAST:event_SupplierTableMouseClicked

    private void resetBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetBtnActionPerformed
        // TODO add your handling code here:
        clearInput();
        setEnabled();
    }//GEN-LAST:event_resetBtnActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        String editSupplier = txtSearch.getText().split(" - ")[0];
        String newSupplierName = txtSupplierName.getText().trim();
        if(!newSupplierName.isEmpty()){
            newSupplierName = newSupplierName.toUpperCase();
        }       
        String email = txtSupplierEmail.getText().trim();
        String phone = txtSupplierPhoneNo.getText().trim();
            
        // Email format: basic validation (e.g., name@domain.com)
        if (!email.matches("^[\\w.-]+@[\\w.-]+\\.[a-zA-Z]{2,6}$")) {
                JOptionPane.showMessageDialog(this, "Invalid email format.", "Input Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

        // Phone format: digits only, between 8 to 15 digits
        if (!phone.matches("^(\\+?60|0)[0-9]{1,2}-?[0-9]{6,8}$")) {
            JOptionPane.showMessageDialog(this, "Invalid Phone Number format.\nAccept: e.g. 012-3456789 or +60-12-3456789", "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        boolean found = false;
        for (Supplier supplier : supplierList) {
            if (supplier.getSupplierId().equalsIgnoreCase(editSupplier)) {
                supplier.setSupplierName(newSupplierName);
                supplier.setSupplierPhoneNo(txtSupplierPhoneNo.getText());
                supplier.setSupplierEmail(txtSupplierEmail.getText());
                FileWriterUtil.writeFile("supplier.txt", Supplier.convertToStringArrayList(supplierList));
                JOptionPane.showMessageDialog(this, "Supplier details updated successfully.");
                loadSuppliersToTable();
                clearInput();
                setEnabled();
                found = true;
                break;
            }
        }
        if(!found){
            JOptionPane.showMessageDialog(this, "Supplier not found to update.");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void loadSuppliersToTable(){
        DefaultTableModel model = (DefaultTableModel) SupplierTable.getModel();
        model.setRowCount(0);

        for (Supplier supplier : supplierList) {
            String itemIdList = getFormattedItemDetails(supplier,itemList);
            if (itemIdList.isEmpty()){
                itemIdList = "No Items";
            }
            Object[] row = {
                supplier.getSupplierId(),
                supplier.getSupplierName(),
                supplier.getSupplierPhoneNo(),
                supplier.getSupplierEmail(),
                itemIdList
            };
            model.addRow(row);
        }
        System.out.println("Rows loaded into table: " + model.getRowCount());
    }
    
    private void makeTableReadOnly(){
        DefaultTableModel model = new DefaultTableModel(
        new String[]{"Supplier ID","Supplier Name", "Contact Number","Email","Supplied Item"},0
        ){
            @Override
            public boolean isCellEditable(int row, int column){
                return false;
            }
        };
        SupplierTable.setModel(model);
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(javax.swing.JLabel.CENTER);

        for (int i = 0; i < SupplierTable.getColumnCount(); i++) {
            if (i != 4) { // Skip column 5 for wrapping
                SupplierTable.getColumnModel().getColumn(i).setCellRenderer(centerRenderer);
            }
        }
        SupplierTable.getTableHeader().setFont(new java.awt.Font("Times New Roman", java.awt.Font.BOLD, 14));
        SupplierTable.getColumnModel().getColumn(4).setCellRenderer((table, value, isSelected, hasFocus, row, column) -> {
            JTextArea textArea = new JTextArea(value != null ? value.toString() : "");
            textArea.setLineWrap(true);
            textArea.setWrapStyleWord(true);
            textArea.setOpaque(true);
            textArea.setEditable(false);
            textArea.setFocusable(false);
            textArea.setFont(table.getFont());
            textArea.setBackground(isSelected ? table.getSelectionBackground() : table.getBackground());
            textArea.setForeground(isSelected ? table.getSelectionForeground() : table.getForeground());

            // 🧠 Adjust row height to fit wrapped text
            int preferredHeight = textArea.getPreferredSize().height;
            if (table.getRowHeight(row) < preferredHeight) {
                table.setRowHeight(row, preferredHeight);
            }
            return textArea;
        });
    }
    
    private String getFormattedItemDetails(Supplier supplier,List<Item> itemList){
        StringBuilder sb = new StringBuilder();
        String supplierid = supplier.getSupplierId();
        for (Item item : itemList){
            if(item.getSupplierids().contains(supplierid)){
                sb.append(item.getItemID()).append(" - ").append(item.getItemName()).append("\n");
            }
        }
        return sb.toString().trim();
    }

    private void clearInput(){
        txtSearch.setText("");
        txtSupplierId.setText("");
        txtSupplierName.setText("");
        txtSupplierPhoneNo.setText("");
        txtSupplierEmail.setText("");
    }
    
     private void setEnabled(){
        txtSearch.setEditable(true);
        txtSupplierName.setEditable(true);
        txtSupplierPhoneNo.setEditable(true);
        txtSupplierEmail.setEditable(true);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SupplierManagementGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SupplierManagementGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SupplierManagementGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SupplierManagementGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SupplierManagementGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Button BackToMenuBtn;
    private javax.swing.JButton SearchBtn;
    private javax.swing.JTable SupplierTable;
    private javax.swing.JButton addbtn;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JButton editBtn;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton resetBtn;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JTextField txtSupplierEmail;
    private javax.swing.JTextField txtSupplierId;
    private javax.swing.JTextField txtSupplierName;
    private javax.swing.JTextField txtSupplierPhoneNo;
    // End of variables declaration//GEN-END:variables
}
