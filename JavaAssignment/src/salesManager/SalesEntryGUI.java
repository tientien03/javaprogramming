/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package salesManager;

import admin.UserClassification;
import java.io.*;
import java.util.*;
import javax.swing.JOptionPane;
import javax.swing.table.*;
import java.text.*;
import main.*;

/**
 *
 * @author User
 */
public class SalesEntryGUI extends javax.swing.JFrame {
    List<Item> itemList = new ArrayList<>();
    List<Supplier> supplierList = new ArrayList<>();
    List<SalesEntry> salesEntryList = new ArrayList<>();
    
    private boolean isEditing = false;
    private int editingRowIndex = -1;
    public SalesEntryGUI() {
        initComponents();
        jPanel1.setBackground(new java.awt.Color(0xc5e1ef));
        setLocationRelativeTo(null);
        
        //set today's date in text field
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        txtDateField.setText(sdf.format(new Date()));
        
        supplierList = Supplier.loadSupplierFromFile("supplier.txt");
        itemList = Item.loadItemFromFile("item.txt", supplierList);
        salesEntryList = SalesEntry.loadSalesEntryFromFile("sales_entry.txt", itemList);
        
        lblItemError.setText("");  
        lblquantityError.setText("");  
        
        comboItemId.setEditable(true);
        comboItemId.removeAllItems();
        comboItemId.addItem("-- Select Item --");
        
        for(Item item : itemList){
            comboItemId.addItem(item.getItemID() + " - " + item.getItemName());
        }
        DefaultTableModel model = (DefaultTableModel) tableCart.getModel();
        model.setRowCount(0);//clear existing rows   
        makeTableReadOnly();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableCart = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        lblquantityError = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtQuantity = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        ConfirmSalesBtn = new javax.swing.JButton();
        AddItemBtn = new javax.swing.JButton();
        comboItemId = new javax.swing.JComboBox<>();
        lblItemError = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        deleteEntry = new javax.swing.JButton();
        editEntry = new javax.swing.JButton();
        txtDateField = new javax.swing.JTextField();
        menuBtn = new javax.swing.JButton();
        viewBtn = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        txtDiscountRate = new javax.swing.JTextField();
        enabledis = new javax.swing.JRadioButton();
        jLabel7 = new javax.swing.JLabel();

        jScrollPane2.setViewportView(jTree1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPanel1.setBackground(java.awt.SystemColor.control);
        jPanel1.setForeground(java.awt.SystemColor.controlHighlight);
        jPanel1.setPreferredSize(new java.awt.Dimension(760, 401));

        tableCart.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        tableCart.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Item ID", "Item Name", "Unit Price", "Quantity", "Total"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableCart.setToolTipText("");
        tableCart.setGridColor(new java.awt.Color(153, 153, 153));
        tableCart.setShowGrid(true);
        jScrollPane1.setViewportView(tableCart);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 48)); // NOI18N
        jLabel1.setText("SALES ENTRY");

        lblquantityError.setFont(new java.awt.Font("Times New Roman", 0, 10)); // NOI18N
        lblquantityError.setForeground(new java.awt.Color(255, 51, 51));
        lblquantityError.setText("gg");

        jLabel3.setFont(new java.awt.Font("Times New Roman", 0, 17)); // NOI18N
        jLabel3.setText("Item ID");

        txtQuantity.setFont(new java.awt.Font("Times New Roman", 0, 17)); // NOI18N

        jLabel4.setFont(new java.awt.Font("Times New Roman", 0, 17)); // NOI18N
        jLabel4.setText("Quantity");

        ConfirmSalesBtn.setBackground(new java.awt.Color(255, 204, 153));
        ConfirmSalesBtn.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        ConfirmSalesBtn.setText("Confirm Sales");
        ConfirmSalesBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConfirmSalesBtnActionPerformed(evt);
            }
        });

        AddItemBtn.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        AddItemBtn.setText("Add Item");
        AddItemBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddItemBtnActionPerformed(evt);
            }
        });

        comboItemId.setEditable(true);
        comboItemId.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        comboItemId.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboItemId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboItemIdActionPerformed(evt);
            }
        });

        lblItemError.setFont(new java.awt.Font("Times New Roman", 0, 10)); // NOI18N
        lblItemError.setForeground(new java.awt.Color(255, 51, 51));
        lblItemError.setText("hhh");

        jLabel5.setFont(new java.awt.Font("Times New Roman", 0, 17)); // NOI18N
        jLabel5.setText("Date");

        deleteEntry.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        deleteEntry.setText("Delete Entry");
        deleteEntry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteEntryActionPerformed(evt);
            }
        });

        editEntry.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        editEntry.setText("Edit Entry");
        editEntry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editEntryActionPerformed(evt);
            }
        });

        txtDateField.setFont(new java.awt.Font("Times New Roman", 0, 17)); // NOI18N
        txtDateField.setText("jTextField1");

        menuBtn.setBackground(new java.awt.Color(255, 204, 204));
        menuBtn.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        menuBtn.setText("MENU");
        menuBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuBtnActionPerformed(evt);
            }
        });

        viewBtn.setFont(new java.awt.Font("Times New Roman", 2, 16)); // NOI18N
        viewBtn.setText("View Sales");
        viewBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewBtnActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Times New Roman", 0, 17)); // NOI18N
        jLabel6.setText("Discount");

        txtDiscountRate.setFont(new java.awt.Font("Times New Roman", 0, 17)); // NOI18N

        enabledis.setBackground(javax.swing.UIManager.getDefaults().getColor("Button.default.hoverBorderColor"));
        enabledis.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        enabledis.setText("Apply Discount");
        enabledis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enabledisActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Times New Roman", 0, 17)); // NOI18N
        jLabel7.setText("%");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(0, 50, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 720, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(557, 557, 557))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(menuBtn)
                                        .addGap(111, 111, 111)
                                        .addComponent(jLabel1))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGap(36, 36, 36)
                                                .addComponent(txtQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 503, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGap(38, 38, 38)
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(lblquantityError, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                                        .addComponent(enabledis, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                                                .addComponent(txtDiscountRate, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addGap(20, 20, 20))
                                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                                .addGap(51, 51, 51)
                                                                .addComponent(jLabel7))))))))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel3)
                                            .addComponent(jLabel5))
                                        .addGap(42, 42, 42)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblItemError, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(comboItemId, javax.swing.GroupLayout.PREFERRED_SIZE, 503, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtDateField, javax.swing.GroupLayout.PREFERRED_SIZE, 503, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(18, 18, 18)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(AddItemBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(viewBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(editEntry, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(deleteEntry, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(ConfirmSalesBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(28, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(menuBtn))
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtDateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(viewBtn))
                .addGap(14, 14, 14)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(comboItemId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AddItemBtn))
                .addGap(0, 0, 0)
                .addComponent(lblItemError)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0)
                .addComponent(lblquantityError)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtDiscountRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(enabledis)
                    .addComponent(jLabel7))
                .addGap(26, 26, 26)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ConfirmSalesBtn)
                    .addComponent(deleteEntry)
                    .addComponent(editEntry))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 800, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 501, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void editEntryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editEntryActionPerformed
        // TODO add your handling code here:
        int selectedRow = tableCart.getSelectedRow();
        if(selectedRow == -1){
            JOptionPane.showMessageDialog(this, "Please select a sales entry to edit.");
        }else{
            isEditing = true;
            editingRowIndex = selectedRow;
            String itemId = tableCart.getValueAt(selectedRow, 0).toString();
            comboItemId.setSelectedItem(itemId + " - " + tableCart.getValueAt(selectedRow, 1).toString());
            txtQuantity.setText(tableCart.getValueAt(selectedRow, 3).toString());
            String priceText = tableCart.getValueAt(selectedRow, 2).toString();
            if (priceText.contains("(-") && priceText.contains("%")) {
                try {
                    // Extract discount rate
                    String discountPart = priceText.split("[-%]")[1];
                    double discountRate = Double.parseDouble(discountPart);
                    enabledis.setSelected(true);
                    txtDiscountRate.setEnabled(true);
                    txtDiscountRate.setText(String.format("%.0f", discountRate)); // e.g., "15"
                } catch (NumberFormatException | IndexOutOfBoundsException e) {
                    clearInput();
                }
            }
        }
    }//GEN-LAST:event_editEntryActionPerformed

    private void deleteEntryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteEntryActionPerformed
        // TODO add your handling code here:
        int selectedRow = tableCart.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select an item to delete from the cart.");
            return;
        }

        int confirm = JOptionPane.showConfirmDialog(this,"Are you sure you want to delete this item from the cart?","Confirm Delete",JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
        DefaultTableModel model = (DefaultTableModel) tableCart.getModel();
        model.removeRow(selectedRow);
        }
        clearInput();
    }//GEN-LAST:event_deleteEntryActionPerformed

    private void comboItemIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboItemIdActionPerformed
        Object selected = comboItemId.getSelectedItem();
        if(selected == null || selected.toString().trim().equalsIgnoreCase("-- Select Item --")){
            lblItemError.setText("Please select or enter a valid Item ID");
            return;
        }
        String itemInput = selected.toString().trim();
        String selectedId = itemInput.contains("-")? itemInput.split("-")[0].trim():itemInput; //Split the string at -, take first part [0]
        Item matchedItem = null;
        for(Item item : itemList){
            if(item.getItemID().equalsIgnoreCase(selectedId)||item.getItemName().equalsIgnoreCase(itemInput)){
                matchedItem = item;
                break;
            }
        }
        if(matchedItem == null){
            if(!selected.toString().trim().equalsIgnoreCase("-- Select Item --")){
                lblItemError.setText("Item not found. Please check ID or name.");
            }
        }else{
            lblItemError.setText("");
        }
    }//GEN-LAST:event_comboItemIdActionPerformed

    private void AddItemBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddItemBtnActionPerformed
        try {
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            sdf.setLenient(false);
            String formattedDate = sdf.format(sdf.parse(txtDateField.getText().trim()));
            //check if sales date existed
            boolean dateExists = salesEntryList.stream().anyMatch(entry -> entry.getSalesdate().equals(formattedDate));
            if (dateExists && !isEditing) {
                int confirm = JOptionPane.showConfirmDialog(this, "Sales already exist for this date.\nDo you want to add more items to it?","Sales Exists",JOptionPane.YES_NO_OPTION);
                if (confirm != JOptionPane.YES_OPTION) {
                    return; // User chose NO or closed the dialog
                }else{
                    viewSales();
                }
            }
            String input = comboItemId.getSelectedItem() != null ? comboItemId.getSelectedItem().toString() : "";
            String quantityText = txtQuantity.getText().trim();
            if(input.isEmpty()||input.equalsIgnoreCase("-- Select Item --")){
                lblItemError.setText("Please select a valid item.");
                return;
            } 
            
            int quantity;
            try{
                quantity = Integer.parseInt(quantityText);
                if(quantity<=0 || quantityText.isEmpty()){
                    lblquantityError.setText("Please enter a valid number");
                    return;
                }
            }catch (NumberFormatException e){
                lblquantityError.setText("Please enter a valid number");
                return;
            }
            //Find the selected item for itemList
            String selectedId = input.contains("-")? input.split("-")[0].trim():input;
            Item selectedItem = null;
            for(Item item : itemList){
                if(item.getItemID().equalsIgnoreCase(selectedId)||item.getItemName().equalsIgnoreCase(input)){
                    selectedItem = item;
                    break;
                }
            }
            //check item available in item list
            if (selectedItem == null) {
                JOptionPane.showMessageDialog(this, "Selected item not found.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            // Check available stock
            if (quantity > selectedItem.getStock()) {
                JOptionPane.showMessageDialog(this, "Not enough stock available.", "Stock Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            double unitPrice = selectedItem.getSalesPrice();
            double discountRate = 0.0;
            if (enabledis.isSelected()) {
                try {
                    discountRate = Double.parseDouble(txtDiscountRate.getText().trim());
                    if (discountRate < 0 || discountRate > 100) {
                        JOptionPane.showMessageDialog(this, "Enter a discount rate between 0 and 100.");
                        return;
                    }
                    unitPrice = unitPrice * (1 - (discountRate / 100));
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(this, "Invalid discount rate.");
                    return;
                }
            }
            double total = unitPrice*quantity;
            DefaultTableModel model = (DefaultTableModel) tableCart.getModel();      
            
            String priceLabel = String.format("%.2f", unitPrice);
            if (discountRate > 0){
                priceLabel += String.format(" (-%.0f%%)", discountRate);
            }
            for (int i = 0; i<model.getRowCount();i++){
                if (i == editingRowIndex && isEditing) {
                    String currentQty = model.getValueAt(i, 3).toString();
                    String currentPrice = model.getValueAt(i, 2).toString();
                    //check any changes made (edit purpose)
                    if (currentQty.equals(String.valueOf(quantity)) && currentPrice.equals(priceLabel)) {
                        JOptionPane.showMessageDialog(this, "No changes detected in the selected entry.");
                        clearInput();
                        return;
                    }
                    model.removeRow(editingRowIndex);
                    continue;
                }
                //found whether item already add to cart
                String itemIdInTable = model.getValueAt(i, 0).toString();
                if(itemIdInTable.equalsIgnoreCase(selectedId) && (!isEditing || i != editingRowIndex)){
                    JOptionPane.showMessageDialog(this,"This item is already added to the sales.","Duplicate Item",JOptionPane.WARNING_MESSAGE);
                    return;
                }
            }
            model.addRow(new Object[]{
                selectedId,
                selectedItem.getItemName(),
                priceLabel,
                quantity,
                String.format("%.2f", total),
            });
            clearInput();
        } catch (ParseException e){
            JOptionPane.showMessageDialog(this, "Invalid date format. Please use yyyy-MM-dd");
        }
    }//GEN-LAST:event_AddItemBtnActionPerformed

    private void ConfirmSalesBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConfirmSalesBtnActionPerformed
        try {
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            sdf.setLenient(false);
            String formattedDate = sdf.format(sdf.parse(txtDateField.getText().trim()));
            String salesId = salesEntryList.stream()
                .filter(entry -> entry.getSalesdate().equals(formattedDate))
                .map(SalesEntry::getSalesID)
                .findFirst()
                .orElseGet(() -> generateNextSalesID());
            DefaultTableModel model = (DefaultTableModel) tableCart.getModel();
            if (model.getRowCount() == 0) {
                JOptionPane.showMessageDialog(this, "No sales to save", "Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }
            //add back stock if sales record existed (for edit purpose)
            for (SalesEntry entry : salesEntryList) {
                if (entry.getSalesdate().equals(formattedDate)) {
                    Item item = entry.getItem();
                    item.setStock(item.getStock() + entry.getQuantity());
                }
            }
            //remove sales record (for edit purpose)
            salesEntryList.removeIf(entry -> entry.getSalesdate().equals(formattedDate));
            //save sales record into file
            for (int i = 0; i < model.getRowCount(); i++) {
                String itemId = model.getValueAt(i, 0).toString();
                int quantity = Integer.parseInt(model.getValueAt(i, 3).toString());
                String priceText = model.getValueAt(i, 2).toString();
                String priceOnly = priceText.split(" ")[0];  // Take only the price before '(-'
                double unitPrice = Double.parseDouble(priceOnly);
                Item selectedItem = itemList.stream()
                    .filter(it -> it.getItemID().equalsIgnoreCase(itemId))
                    .findFirst()
                    .orElse(null);
                if (selectedItem != null) {
                    // Deduct stock again based on new quantity
                    selectedItem.setStock(selectedItem.getStock() - quantity);
                    // Determine if it's a discounted entry
                    double discountRate = 0.0;
                    if (priceText.contains("(-") && priceText.contains("%")) {
                        try {
                            String discountPart = priceText.split("[-%]")[1];
                            discountRate = Double.parseDouble(discountPart);
                        } catch (NumberFormatException | IndexOutOfBoundsException e) {
                            discountRate = 0.0;
                        }
                    }
                    SalesEntry entry;
                    if (discountRate > 0.0) {
                        entry = new DiscountedSalesEntry(salesId, formattedDate, selectedItem, quantity, discountRate);
                        System.out.println("Calculating discounted total:");
                        System.out.println("Item : " +  selectedItem.getItemName());
                        System.out.println("Unit Price : RM" + String.format("%.2f", selectedItem.getSalesPrice()));
                        System.out.println("Quantity   : " + quantity);
                        System.out.println("Discount   : " + discountRate + "%");
                        System.out.println("Total      : RM" + String.format("%.2f", entry.getTotal()));

                    } else {
                        entry = new SalesEntry(salesId, formattedDate, selectedItem, quantity);
                        System.out.println("Calculating total:");
                        System.out.println("Item : " +  selectedItem.getItemName());
                        System.out.println("Unit Price : RM" + String.format("%.2f", selectedItem.getSalesPrice()));
                        System.out.println("Quantity   : " + quantity);
                        System.out.println("Total      : RM" + String.format("%.2f", entry.getTotal()));
                    }
                    salesEntryList.add(entry);
                                    }
            }
            FileWriterUtil.writeFile("item.txt",Item.convertToStringArrayList(itemList));
            FileWriterUtil.writeFile("sales_entry.txt",SalesEntry.convertToStringArrayList(salesEntryList));
            model.setRowCount(0);
            JOptionPane.showMessageDialog(this, "Sales saved successfully");
        } catch (ParseException e) {
            JOptionPane.showMessageDialog(this, "Invalid date format. Please use yyyy-MM-dd");
            return;
        }
    }//GEN-LAST:event_ConfirmSalesBtnActionPerformed

    private void menuBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuBtnActionPerformed
        // TODO add your handling code here:
        SalesManagerMenu menu = new SalesManagerMenu();
        menu.setLocationRelativeTo(null); //center the window
        menu.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_menuBtnActionPerformed

    private void viewBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewBtnActionPerformed
        viewSales();
    }//GEN-LAST:event_viewBtnActionPerformed

    private void enabledisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enabledisActionPerformed
        // TODO add your handling code here:
        txtDiscountRate.setEnabled(enabledis.isSelected());
    }//GEN-LAST:event_enabledisActionPerformed
    
    private String generateNextSalesID() {
        int maxId = 0;
        try (BufferedReader reader = new BufferedReader(new FileReader("sales_entry.txt"))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] parts = line.split(",");
                if (parts.length > 0 && parts[0].startsWith("SE")) {
                    int id = Integer.parseInt(parts[0].substring(2));
                    if (id > maxId) maxId = id;
                }
            }
        } catch (IOException e) {
            
        }
        return String.format("SE%03d", maxId + 1);
    }
    
    private void makeTableReadOnly(){
        DefaultTableModel model = new DefaultTableModel(
        new String[]{"Item ID","Item Name", "Unit Price", "Quantity", "Total"},0
        ){
            @Override
            public boolean isCellEditable(int row, int column){
                return false;
            }
        };
        tableCart.setModel(model);
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(javax.swing.JLabel.CENTER);

        for (int i = 0; i < tableCart.getColumnCount(); i++) {
            tableCart.getColumnModel().getColumn(i).setCellRenderer(centerRenderer);
        }
        tableCart.getTableHeader().setFont(new java.awt.Font("Times New Roman", java.awt.Font.BOLD, 14));
    }
    
    private void viewSales(){
         try{
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            sdf.setLenient(false);
            String formattedDate = sdf.format(sdf.parse(txtDateField.getText().trim()));
            DefaultTableModel model = (DefaultTableModel) tableCart.getModel();
            model.setRowCount(0);
            boolean salesMatch = false;
            for (SalesEntry entry : salesEntryList) {
                if (entry.getSalesdate().equals(formattedDate)) {
                    double unitPrice = entry.getItem().getSalesPrice();
                    String priceLabel;
                    if(!(entry instanceof DiscountedSalesEntry)) {
                        priceLabel = String.format("%.2f", unitPrice);
                    } else {
                        DiscountedSalesEntry discounted = (DiscountedSalesEntry) entry;
                        double discountRate = discounted.getDiscountRate();
                        unitPrice = unitPrice * (1 - discounted.getDiscountRate()/100);
                        priceLabel = String.format("%.2f (-%.0f%%)", unitPrice, discountRate);
                    }
                    model.addRow(new Object[] {
                        entry.getItem().getItemID(),
                        entry.getItem().getItemName(),
                        priceLabel,
                        entry.getQuantity(),
                        String.format("%.2f", entry.getTotal())
                    });
                    salesMatch = true;
                }
            }
            if (!salesMatch) {
                JOptionPane.showMessageDialog(this, "No sales found for this date.", "No Records", JOptionPane.INFORMATION_MESSAGE);
            }
        }catch (ParseException e){
            JOptionPane.showMessageDialog(this, "Invalid date format. Please use yyyy-MM-dd", "Format Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void clearInput(){
        comboItemId.setSelectedItem("-- Select Item --");
        txtQuantity.setText("");    
        txtDiscountRate.setText("");
        enabledis.setSelected(false);
        txtDiscountRate.setEnabled(false);
    }

    
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SalesEntryGUI().setVisible(true);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddItemBtn;
    private javax.swing.JButton ConfirmSalesBtn;
    private javax.swing.JComboBox<String> comboItemId;
    private javax.swing.JButton deleteEntry;
    private javax.swing.JButton editEntry;
    private javax.swing.JRadioButton enabledis;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTree jTree1;
    private javax.swing.JLabel lblItemError;
    private javax.swing.JLabel lblquantityError;
    private javax.swing.JButton menuBtn;
    private javax.swing.JTable tableCart;
    private javax.swing.JTextField txtDateField;
    private javax.swing.JTextField txtDiscountRate;
    private javax.swing.JTextField txtQuantity;
    private javax.swing.JButton viewBtn;
    // End of variables declaration//GEN-END:variables
}
