/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package javaassignment;

import java.io.*;
import java.util.*;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.text.*;

/**
 *
 * @author User
 */
public class SalesEntryGUI extends javax.swing.JFrame {
    List<Item> itemList = new ArrayList<>();
    List<Supplier> supplierList = new ArrayList<>();
    List<SalesEntry> salesEntryList = new ArrayList<>();
    
    private boolean isEditing = false;
    private int editingRowIndex = -1;
    public SalesEntryGUI() {
        initComponents();
        setLocationRelativeTo(null);
        
        //set today's date in text field
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        txtDateField.setText(sdf.format(new Date()));
        
        supplierList = Supplier.loadSupplierFromFile("suppliers.txt");
        itemList = Item.loadItemFromFile("item.txt", supplierList);
        salesEntryList = SalesEntry.loadSalesEntryFromFile("sales_entry.txt", itemList);
        
        lblItemError.setText("");  
        lblquantityError.setText("");  
        
        comboItemId.setEditable(true);
        comboItemId.removeAllItems();
        comboItemId.addItem("-- Select Item --");
        
        for(Item item : itemList){
            comboItemId.addItem(item.getItemID() + " - " + item.getItemName());
        }
        
        DefaultTableModel model = (DefaultTableModel) tableCart.getModel();
        model.setRowCount(0);//clear existing rows    
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableCart = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        lblquantityError = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtQuantity = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        ConfirmSalesBtn = new javax.swing.JButton();
        AddItemBtn = new javax.swing.JButton();
        comboItemId = new javax.swing.JComboBox<>();
        lblItemError = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        deleteEntry = new javax.swing.JButton();
        editEntry = new javax.swing.JButton();
        txtDateField = new javax.swing.JTextField();
        BackToMenuBtn = new java.awt.Button();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(java.awt.SystemColor.control);
        jPanel1.setForeground(java.awt.SystemColor.controlHighlight);
        jPanel1.setPreferredSize(new java.awt.Dimension(760, 401));

        tableCart.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        tableCart.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Item ID", "Item Name", "Unit Price", "Quantity", "Total"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableCart.setToolTipText("");
        tableCart.setGridColor(new java.awt.Color(255, 255, 255));
        jScrollPane1.setViewportView(tableCart);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 48)); // NOI18N
        jLabel1.setText("SALES ENTRY");

        lblquantityError.setFont(new java.awt.Font("Times New Roman", 0, 10)); // NOI18N
        lblquantityError.setForeground(new java.awt.Color(255, 51, 51));
        lblquantityError.setText("gg");

        jLabel3.setFont(new java.awt.Font("Times New Roman", 0, 17)); // NOI18N
        jLabel3.setText("Item ID");

        txtQuantity.setFont(new java.awt.Font("Times New Roman", 0, 17)); // NOI18N

        jLabel4.setFont(new java.awt.Font("Times New Roman", 0, 17)); // NOI18N
        jLabel4.setText("Quantity");

        ConfirmSalesBtn.setBackground(new java.awt.Color(255, 204, 153));
        ConfirmSalesBtn.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        ConfirmSalesBtn.setText("Confirm Sales");
        ConfirmSalesBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConfirmSalesBtnActionPerformed(evt);
            }
        });

        AddItemBtn.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        AddItemBtn.setText("Add Item");
        AddItemBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddItemBtnActionPerformed(evt);
            }
        });

        comboItemId.setEditable(true);
        comboItemId.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        comboItemId.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboItemId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboItemIdActionPerformed(evt);
            }
        });

        lblItemError.setFont(new java.awt.Font("Times New Roman", 0, 10)); // NOI18N
        lblItemError.setForeground(new java.awt.Color(255, 51, 51));
        lblItemError.setText("hhh");

        jLabel5.setFont(new java.awt.Font("Times New Roman", 0, 17)); // NOI18N
        jLabel5.setText("Date");

        deleteEntry.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        deleteEntry.setText("Delete Entry");
        deleteEntry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteEntryActionPerformed(evt);
            }
        });

        editEntry.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        editEntry.setText("Edit Entry");
        editEntry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editEntryActionPerformed(evt);
            }
        });

        txtDateField.setFont(new java.awt.Font("Times New Roman", 0, 17)); // NOI18N
        txtDateField.setText("jTextField1");

        BackToMenuBtn.setBackground(new java.awt.Color(255, 255, 255));
        BackToMenuBtn.setLabel("MENU");
        BackToMenuBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackToMenuBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(0, 51, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 720, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(BackToMenuBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(143, 143, 143)
                                .addComponent(jLabel1))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(38, 38, 38)
                                        .addComponent(lblquantityError, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(36, 36, 36)
                                        .addComponent(txtQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 503, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel5))
                                .addGap(42, 42, 42)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblItemError, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(comboItemId, javax.swing.GroupLayout.PREFERRED_SIZE, 503, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtDateField, javax.swing.GroupLayout.PREFERRED_SIZE, 503, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(18, 18, 18)
                        .addComponent(AddItemBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(editEntry, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(deleteEntry, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(ConfirmSalesBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(29, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(BackToMenuBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtDateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(comboItemId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AddItemBtn))
                .addGap(0, 0, 0)
                .addComponent(lblItemError)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0)
                .addComponent(lblquantityError)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ConfirmSalesBtn)
                    .addComponent(deleteEntry)
                    .addComponent(editEntry))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 800, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 500, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void editEntryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editEntryActionPerformed
        // TODO add your handling code here:
        int selectedRow = tableCart.getSelectedRow();
        if(selectedRow == -1){
            JOptionPane.showMessageDialog(this, "Please select a sales entry to edit.");
            return;
        }else{
            isEditing = true;
            editingRowIndex = selectedRow;
            String itemId = tableCart.getValueAt(selectedRow, 0).toString();
            comboItemId.setSelectedItem(itemId + " - " + tableCart.getValueAt(selectedRow, 1).toString());
            txtQuantity.setText(tableCart.getValueAt(selectedRow, 3).toString());
        }
    }//GEN-LAST:event_editEntryActionPerformed

    private void deleteEntryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteEntryActionPerformed
        // TODO add your handling code here:
        int selectedRow = tableCart.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select an item to delete from the cart.");
            return;
        }

        int confirm = JOptionPane.showConfirmDialog(this,"Are you sure you want to delete this item from the cart?","Confirm Delete",JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
        DefaultTableModel model = (DefaultTableModel) tableCart.getModel();
        model.removeRow(selectedRow);
        }
    }//GEN-LAST:event_deleteEntryActionPerformed

    private void comboItemIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboItemIdActionPerformed
        Object selected = comboItemId.getSelectedItem();
        if(selected == null || selected.toString().trim().equalsIgnoreCase("-- Select Item --")){
            lblItemError.setText("Please select or enter a valid Item ID");
            return;
        }
        String itemInput = selected.toString().trim();
        String selectedId = itemInput.contains("-")? itemInput.split("-")[0].trim():itemInput; //Split the string at -, take first part [0]
        Item matchedItem = null;
        for(Item item : itemList){
            if(item.getItemID().equalsIgnoreCase(selectedId)||item.getItemID().equalsIgnoreCase(itemInput)){
                matchedItem = item;
                break;
            }
        }
        if(matchedItem == null){
            if(!!selected.toString().trim().equalsIgnoreCase("-- Select Item --")){
                lblItemError.setText("Item not found. Please check ID or name.");
            }
        }else{
            lblItemError.setText("");
        }
    }//GEN-LAST:event_comboItemIdActionPerformed

    private void AddItemBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddItemBtnActionPerformed
        try {
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            sdf.setLenient(false);
            Date date = sdf.parse(txtDateField.getText().trim());
            
            String input = comboItemId.getSelectedItem() != null ? comboItemId.getSelectedItem().toString() : "";
            String quantityText = txtQuantity.getText().trim();
            
            if(input.isEmpty()||input.equalsIgnoreCase("-- Selected Item --")){
                lblItemError.setText("Please select a valid item.");
                return;
            } 
            
            int quantity = 0;
            try{
                quantity = Integer.parseInt(quantityText);
                if(quantity<=0 || quantityText.isEmpty()){
                    lblquantityError.setText("Please enter a valid number");
                    return;
                }
            }catch (NumberFormatException e){
                lblquantityError.setText("Please enter a valid number");
                return;
            }
            
            //Find the selected item for itemList
            String selectedId = input.contains("-")? input.split("-")[0].trim():input;
            Item selectedItem = null;
            for(Item item : itemList){
                if(item.getItemID().equalsIgnoreCase(selectedId)){
                    selectedItem = item;
                    break;
                }
            }
            if (selectedItem == null) {
                JOptionPane.showMessageDialog(this, "Selected item not found.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Check available stock
            if (quantity > selectedItem.getStock()) {
                JOptionPane.showMessageDialog(this, "Not enough stock available.", "Stock Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
   
            double unitPrice = selectedItem.getPrice();
            double total = unitPrice*quantity;
            
            DefaultTableModel model = (DefaultTableModel) tableCart.getModel();      
            //found whether item already add to cart
            for (int i = 0; i<model.getRowCount();i++){
                if ( i == editingRowIndex && isEditing){
                    model.removeRow(editingRowIndex);
                    continue;
                }
                String itemIdInTable = model.getValueAt(i, 0).toString();
                if(itemIdInTable.equalsIgnoreCase(selectedId)){
                    JOptionPane.showMessageDialog(this,"This item is already added to the sales.","Duplicate Item",JOptionPane.WARNING_MESSAGE);
                    return;
                }
            }
            
            model.addRow(new Object[]{
                selectedId,
                selectedItem.getItemName(),
                String.format("%.2f", unitPrice),
                quantity,
                String.format("%.2f", total),
            });
            comboItemId.setSelectedItem("-- Selected Item --");
            txtQuantity.setText("");
        } catch (ParseException e){
            JOptionPane.showMessageDialog(this, "Invalid date format. Please use yyyy-MM-dd");
        }
    }//GEN-LAST:event_AddItemBtnActionPerformed

    private void ConfirmSalesBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConfirmSalesBtnActionPerformed
        try {
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            sdf.setLenient(false);
            Date date = sdf.parse(txtDateField.getText().trim());
            String formattedDate = sdf.format(date);
            String salesId = generateNextSalesID();         
            //deduct stock
            DefaultTableModel model = (DefaultTableModel) tableCart.getModel();
            for(int i = 0; i < model.getRowCount(); i++){
                String itemId = model.getValueAt(i, 0).toString();
                int quantity = Integer.parseInt(model.getValueAt(i, 3).toString());

                for (Item item : itemList) {
                    if (item.getItemID().equalsIgnoreCase(itemId)) {
                        int currentStock = item.getStock();
                        item.setStock(currentStock - quantity);
                        break;
                    }
                }
            }
            FileWriterUtil.writeFile("item.txt",Item.convertToStringArrayList(itemList));
            // append sales enrty into file
            int rowCount = model.getRowCount();
            if(rowCount == 0){
                JOptionPane.showMessageDialog(this, "No sales to save","Warning",JOptionPane.WARNING_MESSAGE);
            }
            for(int i = 0; i<rowCount ;i++){
                String itemId = model.getValueAt(i, 0).toString();
                String itemName = model.getValueAt(i, 1).toString();
                double price = Double.parseDouble(model.getValueAt(i, 2).toString());
                int quantity = Integer.parseInt(model.getValueAt(i, 3).toString());
                double total = Double.parseDouble(model.getValueAt(i, 4).toString());
                Item item = new Item(itemId, itemName, null, price, 0.0,0);
                SalesEntry newEntry = new SalesEntry(salesId, formattedDate,item,quantity,total);
                salesEntryList.add(newEntry);
            }
            FileWriterUtil.writeFile("sales_entry.txt",SalesEntry.convertToStringArrayList(salesEntryList));
            model.setRowCount(0);
            JOptionPane.showMessageDialog(this, "Sales saved successfully");
            
        } catch (ParseException e) {
            JOptionPane.showMessageDialog(this, "Invalid date format. Please use yyyy-MM-dd");
            return;
        }
    }//GEN-LAST:event_ConfirmSalesBtnActionPerformed

    private void BackToMenuBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackToMenuBtnActionPerformed
        // TODO add your handling code here:
        SalesManagerMenu menu = new SalesManagerMenu();
        menu.setLocationRelativeTo(null); //center the window
        menu.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_BackToMenuBtnActionPerformed
    
    private String generateNextSalesID() {
        int maxId = 0;
        try (BufferedReader reader = new BufferedReader(new FileReader("sales_entry.txt"))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] parts = line.split(",");
                if (parts.length > 0 && parts[0].startsWith("SE")) {
                    int id = Integer.parseInt(parts[0].substring(2));
                    if (id > maxId) maxId = id;
                }
            }
        } catch (IOException e) {
            
        }
        return String.format("SE%03d", maxId + 1);
    }

    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SalesEntryGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SalesEntryGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SalesEntryGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SalesEntryGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SalesEntryGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddItemBtn;
    private java.awt.Button BackToMenuBtn;
    private javax.swing.JButton ConfirmSalesBtn;
    private javax.swing.JComboBox<String> comboItemId;
    private javax.swing.JButton deleteEntry;
    private javax.swing.JButton editEntry;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblItemError;
    private javax.swing.JLabel lblquantityError;
    private javax.swing.JTable tableCart;
    private javax.swing.JTextField txtDateField;
    private javax.swing.JTextField txtQuantity;
    // End of variables declaration//GEN-END:variables
}
