/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package javaassignment;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author User
 */
public class ItemManagement extends javax.swing.JFrame {
    ArrayList<Item>items = new ArrayList<Item>();
    public ItemManagement() {
        initComponents();
        setLocationRelativeTo(null);
        makeTableReadOnly();
        loaditemfile();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDesktopPane1 = new javax.swing.JDesktopPane();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ItemTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtItemName = new java.awt.TextField();
        txtItemId = new java.awt.TextField();
        txtItemQuantity = new java.awt.TextField();
        FindBtn = new java.awt.Button();
        txtSupplierId = new java.awt.TextField();
        txtItemPrice = new java.awt.TextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        EditBtn = new java.awt.Button();
        SaveBtn = new java.awt.Button();
        AddBtn = new java.awt.Button();
        DeleteBtn = new java.awt.Button();
        BackToMenuBtn = new java.awt.Button();
        ResetBtn = new java.awt.Button();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jDesktopPane1.setBackground(new java.awt.Color(255, 255, 204));

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("ITEM MANAGEMENT");

        ItemTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Item ID", "Item Name", "Supplier ID", "Price", "Quantity"
            }
        ));
        ItemTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ItemTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(ItemTable);

        jLabel2.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel2.setText("Item Name");

        jLabel3.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel3.setText("Item ID");

        jLabel4.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel4.setText("Supplier ID");

        FindBtn.setBackground(new java.awt.Color(255, 255, 255));
        FindBtn.setLabel("FIND");
        FindBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FindBtnActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel5.setText("Price");

        jLabel6.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel6.setText("Quantity");

        EditBtn.setBackground(new java.awt.Color(255, 255, 255));
        EditBtn.setLabel("EDIT");
        EditBtn.setName(""); // NOI18N
        EditBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditBtnActionPerformed(evt);
            }
        });

        SaveBtn.setBackground(new java.awt.Color(255, 255, 255));
        SaveBtn.setLabel("SAVE");
        SaveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveBtnActionPerformed(evt);
            }
        });

        AddBtn.setBackground(new java.awt.Color(255, 255, 255));
        AddBtn.setLabel("ADD");
        AddBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddBtnActionPerformed(evt);
            }
        });

        DeleteBtn.setBackground(new java.awt.Color(255, 255, 255));
        DeleteBtn.setLabel("DELETE");
        DeleteBtn.setName(""); // NOI18N
        DeleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteBtnActionPerformed(evt);
            }
        });

        BackToMenuBtn.setBackground(new java.awt.Color(204, 255, 255));
        BackToMenuBtn.setLabel("MENU");
        BackToMenuBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackToMenuBtnActionPerformed(evt);
            }
        });

        ResetBtn.setBackground(new java.awt.Color(255, 255, 255));
        ResetBtn.setLabel("RESET");
        ResetBtn.setName(""); // NOI18N
        ResetBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResetBtnActionPerformed(evt);
            }
        });

        jDesktopPane1.setLayer(jLabel1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jScrollPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jLabel2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jLabel3, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jLabel4, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(txtItemName, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(txtItemId, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(txtItemQuantity, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(FindBtn, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(txtSupplierId, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(txtItemPrice, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jLabel5, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jLabel6, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(EditBtn, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(SaveBtn, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(AddBtn, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(DeleteBtn, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(BackToMenuBtn, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(ResetBtn, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jDesktopPane1Layout = new javax.swing.GroupLayout(jDesktopPane1);
        jDesktopPane1.setLayout(jDesktopPane1Layout);
        jDesktopPane1Layout.setHorizontalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDesktopPane1Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jDesktopPane1Layout.createSequentialGroup()
                        .addComponent(BackToMenuBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 172, Short.MAX_VALUE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(233, 233, 233))
                    .addGroup(jDesktopPane1Layout.createSequentialGroup()
                        .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 728, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jDesktopPane1Layout.createSequentialGroup()
                                .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, 0)
                                .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txtItemId, javax.swing.GroupLayout.PREFERRED_SIZE, 509, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtItemName, javax.swing.GroupLayout.PREFERRED_SIZE, 509, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtSupplierId, javax.swing.GroupLayout.PREFERRED_SIZE, 509, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtItemPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 509, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtItemQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 509, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(20, 20, 20)
                                .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(AddBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(SaveBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(DeleteBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(EditBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(FindBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jDesktopPane1Layout.createSequentialGroup()
                                        .addGap(2, 2, 2)
                                        .addComponent(ResetBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addContainerGap())))
        );
        jDesktopPane1Layout.setVerticalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDesktopPane1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(BackToMenuBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jDesktopPane1Layout.createSequentialGroup()
                        .addComponent(FindBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(AddBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SaveBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(DeleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(EditBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ResetBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jDesktopPane1Layout.createSequentialGroup()
                        .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3)
                            .addComponent(txtItemId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(22, 22, 22)
                        .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addComponent(txtItemName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(22, 22, 22)
                        .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(txtSupplierId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(26, 26, 26)
                        .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtItemPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addGap(23, 23, 23)
                        .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(txtItemQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(63, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jDesktopPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jDesktopPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

   
    private void SaveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = ItemTable.getSelectedRow();
        if(selectedRow == -1){
            JOptionPane.showMessageDialog(this, "Please select or find an item to update");
        }
        String supplierId = txtSupplierId.getText();
        Supplier selectedSupplier = null;
        List<Supplier> supplierList = loadSupplierFromFile();
        for (Supplier s: supplierList){
            if(s.getSupplierId().equalsIgnoreCase(supplierId)){
                selectedSupplier = s;
                break;
            }
        }
        if(selectedSupplier == null){
            JOptionPane.showMessageDialog(this, "Supplier ID not found.");
            return;
        }
        try{
            DefaultTableModel model = (DefaultTableModel)ItemTable.getModel();
            model.setValueAt(txtItemId.getText(),selectedRow,0);
            model.setValueAt(txtItemName.getText(),selectedRow,1);
            model.setValueAt(txtSupplierId.getText(),selectedRow,2);
            model.setValueAt(String.format("%.2f", Double.parseDouble(txtItemPrice.getText())),selectedRow,3);
            model.setValueAt(Integer.parseInt(txtItemQuantity.getText()),selectedRow,4);
            saveItemToFile();
            txtItemId.setText("");txtItemName.setText("");txtSupplierId.setText("");txtItemPrice.setText("");txtItemQuantity.setText("");
        }catch(Exception e){
            JOptionPane.showMessageDialog(this,"Error updating item:" + e.getMessage());
        }
    }//GEN-LAST:event_SaveBtnActionPerformed

    private void EditBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditBtnActionPerformed
        // TODO add your handling code here:
        String editID = txtItemId.getText().trim();
        DefaultTableModel model = (DefaultTableModel)ItemTable.getModel();
        boolean found = false;
        for(int i=0; i<model.getRowCount();i++){
            if(model.getValueAt(i,0).toString().equalsIgnoreCase(editID)){
                txtItemName.setText(model.getValueAt(i, 1).toString());
                txtSupplierId.setText(model.getValueAt(i, 2).toString());
                txtItemPrice.setText(model.getValueAt(i, 3).toString());
                txtItemQuantity.setText(model.getValueAt(i, 4).toString());
                ItemTable.setRowSelectionInterval(i,i);
                found = true;
                txtItemName.setEditable(true);txtSupplierId.setEditable(true);
                txtItemPrice.setEditable(true);txtItemQuantity.setEditable(true);
                break; 
            }
        }
    }//GEN-LAST:event_EditBtnActionPerformed

    private void AddBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddBtnActionPerformed
        try{
            if (txtItemId.getText().isEmpty() ||txtItemName.getText().isEmpty() ||txtSupplierId.getText().isEmpty() ||txtItemPrice.getText().isEmpty() ||txtItemQuantity.getText().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please fill in all fields.");
                return; // stop the method here
            }
            //check item id
            String newItemId= txtItemId.getText().trim();
            boolean isDuplicate = false;
            //check id, no duplication on id
            try(Scanner sc = new Scanner(new File("item.txt"))){
                while(sc.hasNextLine()){
                    String[] parts = sc.nextLine().split(",");
                    if(parts.length >= 1 && parts[0].equalsIgnoreCase(newItemId)){
                        isDuplicate = true;
                        break;
                    }
                }
            }catch (Exception e){
                JOptionPane.showMessageDialog(this, "Error Loading items:" + e.getMessage());
            }           
            if (isDuplicate){
                JOptionPane.showMessageDialog(this,"Item ID already exists. Please use a different ID.");
                return;
            }
            //check supplierid
            String supplierId = txtSupplierId.getText();
            Supplier selectedSupplier = null;
            List<Supplier> supplierList = loadSupplierFromFile();
            for (Supplier s: supplierList){
                if(s.getSupplierId().equalsIgnoreCase(supplierId)){
                    selectedSupplier = s;
                    break;
                }else{
                    
                }
            }
            if(selectedSupplier == null){
                JOptionPane.showMessageDialog(this, "Supplier ID not found.");
                return;
            }
            //add new item to file
            Item newItem = new Item(
                txtItemId.getText(),
                txtItemName.getText(),
                selectedSupplier,
                Double.parseDouble(txtItemPrice.getText()),
                Integer.parseInt(txtItemQuantity.getText())
            );
            saveItemToFile(newItem);
            System.out.println("New item added.");
            //clear input
            txtItemId.setText("");txtItemName.setText("");txtSupplierId.setText("");txtItemPrice.setText("");txtItemQuantity.setText("");
            loaditemfile();
        }catch (NumberFormatException e){
            JOptionPane.showMessageDialog(this, "Price and Quantity must be numeric.");
        }
    }//GEN-LAST:event_AddBtnActionPerformed

    private void DeleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow=ItemTable.getSelectedRow();
        if(selectedRow == -1){
            String findID = txtItemId.getText().trim();
            if(findID.isEmpty()){
                JOptionPane.showMessageDialog(this,"Please select a item to delete.");
                return;
            }          
            DefaultTableModel model = (DefaultTableModel)ItemTable.getModel();
            for(int i=0; i<model.getRowCount();i++){
                if(model.getValueAt(i,0).toString().equalsIgnoreCase(findID)){
                    txtItemName.setText(model.getValueAt(i, 1).toString());
                    txtSupplierId.setText(model.getValueAt(i, 2).toString());
                    txtItemPrice.setText(model.getValueAt(i, 3).toString());
                    txtItemQuantity.setText(model.getValueAt(i, 4).toString());
                    ItemTable.setRowSelectionInterval(i,i);
                    txtItemName.setEditable(true);txtSupplierId.setEditable(true);
                    txtItemPrice.setEditable(true);txtItemQuantity.setEditable(true);
                    selectedRow = i;
                    break; 
                }
            }
        }
        
        if(selectedRow == -1){
            JOptionPane.showMessageDialog(this,"Item ID not found.");
            return;
        }
        
        int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this item?","Confrim Delete",JOptionPane.YES_NO_OPTION);
        if(confirm == JOptionPane.YES_OPTION){
            DefaultTableModel model = (DefaultTableModel) ItemTable.getModel();
            model.removeRow(selectedRow);
            saveItemToFile();
            //clear input
            txtItemId.setText("");txtItemName.setText("");txtSupplierId.setText("");txtItemPrice.setText("");txtItemQuantity.setText("");
            JOptionPane.showMessageDialog(this, "Item deleted successfully.");
        }
    }//GEN-LAST:event_DeleteBtnActionPerformed
    //maybe delete this one
    private void FindBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FindBtnActionPerformed
        // TODO add your handling code here:
        String findID = txtItemId.getText().trim();
        if(findID.isEmpty()){
            JOptionPane.showMessageDialog(this, "❌ Item ID is Empty.");
            return;//exit the method here
        }
        DefaultTableModel model = (DefaultTableModel)ItemTable.getModel();
        boolean found = false;
        for(int i=0; i<model.getRowCount();i++){
            if(model.getValueAt(i,0).toString().equalsIgnoreCase(findID)){
                txtItemName.setText(model.getValueAt(i, 1).toString());
                txtSupplierId.setText(model.getValueAt(i, 2).toString());
                txtItemPrice.setText(model.getValueAt(i, 3).toString());
                txtItemQuantity.setText(model.getValueAt(i, 4).toString());
                ItemTable.setRowSelectionInterval(i,i);
                found = true;
                txtItemName.setEditable(false);txtSupplierId.setEditable(false);
                txtItemPrice.setEditable(false);txtItemQuantity.setEditable(false);
                break; 
            }
        }
        if (!found) {
            JOptionPane.showMessageDialog(this, "❌ Item ID not found.");
            txtItemId.setText("");txtItemName.setText("");txtSupplierId.setText("");txtItemPrice.setText("");txtItemQuantity.setText("");
        }
    }//GEN-LAST:event_FindBtnActionPerformed

    private void BackToMenuBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackToMenuBtnActionPerformed
        // TODO add your handling code here:
        SalesManagerMenu menu = new SalesManagerMenu();
        menu.setLocationRelativeTo(null); //center the window
        menu.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_BackToMenuBtnActionPerformed

    private void ResetBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResetBtnActionPerformed
        // TODO add your handling code here:
        txtItemId.setText("");txtItemName.setText("");txtSupplierId.setText("");txtItemPrice.setText("");txtItemQuantity.setText("");
        txtItemName.setEditable(true);txtSupplierId.setEditable(true);
        txtItemPrice.setEditable(true);txtItemQuantity.setEditable(true); 
    }//GEN-LAST:event_ResetBtnActionPerformed

    private void ItemTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ItemTableMouseClicked
        // TODO add your handling code here:
        int selectedRow = ItemTable.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) ItemTable.getModel();
        if(selectedRow != -1){
            txtItemId.setText(model.getValueAt(selectedRow, 0).toString());
            txtItemName.setText(model.getValueAt(selectedRow, 1).toString());
            txtSupplierId.setText(model.getValueAt(selectedRow, 2).toString());
            txtItemPrice.setText(model.getValueAt(selectedRow, 3).toString());
            txtItemQuantity.setText(model.getValueAt(selectedRow, 4).toString());
            txtItemName.setEditable(false);txtSupplierId.setEditable(false);
            txtItemPrice.setEditable(false);txtItemQuantity.setEditable(false);    
        }   
    }//GEN-LAST:event_ItemTableMouseClicked
    
    private void loaditemfile(){
        try{
            File file = new File("item.txt");
            Scanner scan = new Scanner(file);
            DefaultTableModel model = (DefaultTableModel) ItemTable.getModel();
            model.setRowCount(0);
            while(scan.hasNextLine()){
                String[] parts = scan.nextLine().split(",");
                if(parts.length == 5){
                    Object[] row = {
                        parts[0], parts[1],parts[2],
                        String.format("%.2f",Double.parseDouble(parts[3])),
                        Integer.parseInt(parts[4])
                    };
                    model.addRow(row);
                }             
            }
            scan.close();
        }catch (Exception e){
            JOptionPane.showMessageDialog(this, "Error Loading items:" + e.getMessage());
        }
    }
    
    private void saveItemToFile(Item item){
        try{
            FileWriter writer = new FileWriter("item.txt", true); //true = append mode
            writer.write(item.toFileString() + "\n");
            writer.close();
            JOptionPane.showMessageDialog(null, "Item saved to file");
        }catch (IOException e){
            JOptionPane.showMessageDialog(null, "Error saving item:" + e.getMessage());
        }
    }
    
    private void saveItemToFile(){
        try{
            FileWriter writer = new FileWriter("item.txt"); //true = append mode
            DefaultTableModel model = (DefaultTableModel) ItemTable.getModel();
            for(int i=0; i<model.getRowCount(); i++){
                String line = model.getValueAt(i,0)+","+
                              model.getValueAt(i,1)+","+
                              model.getValueAt(i,2)+","+
                              model.getValueAt(i,3)+","+
                              model.getValueAt(i,4);
                writer.write(line + "\n");
            }
            writer.close();
            JOptionPane.showMessageDialog(null, "Item saved to file");
        }catch (IOException e){
            JOptionPane.showMessageDialog(null, "Error saving item:" + e.getMessage());
        }
    }
    
    private void makeTableReadOnly(){
        DefaultTableModel model = new DefaultTableModel(
        new String[]{"Item ID","Item Name", "Supplier ID", "Price", "Quantity"},0
        ){
            @Override
            public boolean isCellEditable(int row, int column){
                return false;
            }
        };
        ItemTable.setModel(model);
    }
    
    public List<Supplier> loadSupplierFromFile(){
        List<Supplier> supplierList = new ArrayList<>();
        try (BufferedReader reader = new BufferedReader(new FileReader("supplier.txt"))){
            String line;
            while((line=reader.readLine())!=null){
                String[] parts = line.split(",");
                if(parts.length==4){
                    supplierList.add(new Supplier(
                            parts[0].trim(),
                            parts[1].trim(),
                            parts[2].trim(),
                            parts[3].trim()
                    ));
                }
            }
        }catch (IOException e){
            e.printStackTrace();
        }
        return supplierList;
    }
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ItemManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ItemManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ItemManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ItemManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ItemManagement().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Button AddBtn;
    private java.awt.Button BackToMenuBtn;
    private java.awt.Button DeleteBtn;
    private java.awt.Button EditBtn;
    private java.awt.Button FindBtn;
    private javax.swing.JTable ItemTable;
    private java.awt.Button ResetBtn;
    private java.awt.Button SaveBtn;
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private java.awt.TextField txtItemId;
    private java.awt.TextField txtItemName;
    private java.awt.TextField txtItemPrice;
    private java.awt.TextField txtItemQuantity;
    private java.awt.TextField txtSupplierId;
    // End of variables declaration//GEN-END:variables
}
