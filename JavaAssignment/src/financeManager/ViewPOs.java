/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package financeManager;

import PurchaseManager.PurchaseOrder;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.util.List;
import java.util.ArrayList;
import javax.swing.table.DefaultTableCellRenderer;
import main.FileReaderUtil;



/**
 *
 * @author limsh
 */
public class ViewPOs extends javax.swing.JFrame {

    private List<PurchaseOrder> purchaseOrders;

    /**
     * Creates new form ViewPOs
     */
    public ViewPOs() {
        initComponents();
        ((DefaultTableCellRenderer) POTable.getTableHeader().getDefaultRenderer())
            .setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        centerTableText();
        POTable.setRowHeight(30);
       
        DefaultTableModel model = new DefaultTableModel(new Object[][]{}, 
            new String[]{"PO ID", "PR ID", "ITEM CODE", "QUANTITY", "SUPPLIER ID", "PURCHASE MANAGER", "DATE", "STATUS"}) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;  // All cells are non-editable
            }
        };
        POTable.setModel(model);
        
        purchaseOrders = new ArrayList<>();
        loadPurchaseOrders();
        setLocationRelativeTo(null);
        getContentPane().setBackground(new java.awt.Color(0xc5e1ef));

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Title = new javax.swing.JLabel();
        RefreshButton = new javax.swing.JButton();
        SearchButton = new javax.swing.JButton();
        SearchTF = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        POTable = new javax.swing.JTable();
        CloseButton = new javax.swing.JButton();
        Filter = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Title.setFont(new java.awt.Font("Times New Roman", 1, 48)); // NOI18N
        Title.setText("Purchase Orders");

        RefreshButton.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        RefreshButton.setText("Refresh ");
        RefreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RefreshButtonActionPerformed(evt);
            }
        });

        SearchButton.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        SearchButton.setText("Search");
        SearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchButtonActionPerformed(evt);
            }
        });

        SearchTF.setColumns(15);
        SearchTF.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        SearchTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchTFActionPerformed(evt);
            }
        });

        POTable.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        POTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "PO ID", "PR ID", "ITEM CODE", "QUANTITY", "SUPPLIER ID", "PURCHASE MANAGER ID", "DATE", "STATUS"
            }
        ));
        jScrollPane1.setViewportView(POTable);

        CloseButton.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        CloseButton.setText("Menu");
        CloseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CloseButtonActionPerformed(evt);
            }
        });

        Filter.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        Filter.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All", "Updated", "Approved", "Pending" }));
        Filter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FilterActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(RefreshButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(SearchTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(SearchButton)
                                .addGap(18, 18, 18)
                                .addComponent(Filter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 692, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(CloseButton)
                        .addGap(135, 135, 135)
                        .addComponent(Title)))
                .addContainerGap(55, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(CloseButton)
                    .addComponent(Title, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(SearchButton)
                                    .addComponent(Filter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(RefreshButton)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(SearchTF, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 365, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void RefreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RefreshButtonActionPerformed
        loadPurchaseOrders();
        JOptionPane.showMessageDialog(this, "Purchase Orders refreshed successfully!", "Information", JOptionPane.INFORMATION_MESSAGE);
        SearchTF.setText("");// TODO add your handling code here:
    }//GEN-LAST:event_RefreshButtonActionPerformed

    private void CloseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CloseButtonActionPerformed
        FinanceManagerMenu menu = new FinanceManagerMenu();
        menu.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_CloseButtonActionPerformed

    private void SearchTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchTFActionPerformed
        String keyword = SearchTF.getText().trim();
        if (keyword.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter a keyword to search.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        searchPurchaseOrder(keyword);// TODO add your handling code here:
    }//GEN-LAST:event_SearchTFActionPerformed

    private void FilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FilterActionPerformed
        String status = Filter.getSelectedItem().toString();
        if (status.equals("All")) {
            loadPurchaseOrders();
        } else {
            filterPurchaseOrder(status);
        }// TODO add your handling code here:
    }//GEN-LAST:event_FilterActionPerformed

    private void SearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchButtonActionPerformed
        String keyword = SearchTF.getText().trim();
        if (keyword.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter PO ID, PR ID or ITEM CODE to search.", "Warning", JOptionPane.WARNING_MESSAGE);
            loadPurchaseOrders();
            return;
        }
        searchPurchaseOrder(keyword);// TODO add your handling code here:
    }//GEN-LAST:event_SearchButtonActionPerformed
                                      

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewPOs.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewPOs.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewPOs.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewPOs.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ViewPOs().setVisible(true);
            }
        });
    }
    
    private void centerTableText() {
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        for (int i = 0; i < POTable.getColumnCount(); i++) {
            POTable.getColumnModel().getColumn(i).setCellRenderer(centerRenderer);
        }
    }
    
    private void loadPurchaseOrders() {
        try {
            List<String[]> data = FileReaderUtil.readFileAsArrays("purchase_orders.txt");
            purchaseOrders.clear();
            DefaultTableModel model = (DefaultTableModel) POTable.getModel();
            model.setRowCount(0);

            for (String[] line : data) {
                // Directly load data into the table
                model.addRow(new Object[]{
                    line[0],
                    line[1], 
                    line[2],  
                    line[3],  
                    line[4],
                    line[5],
                    line[6],
                    line[7]  
                });
                centerTableText();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error loading Purchase Orders: " + e.getMessage());
        }
    }


    private void searchPurchaseOrder(String keyword) {
        boolean found = false;
        int rowCount = POTable.getRowCount();
        
        for (int i = 0; i < rowCount; i++) {
            if (POTable.getValueAt(i, 0).equals(keyword) || 
                POTable.getValueAt(i, 1).equals(keyword) || 
                POTable.getValueAt(i, 2).equals(keyword) || 
                POTable.getValueAt(i, 4).equals(keyword)) {
                POTable.setRowSelectionInterval(i, i);
                POTable.scrollRectToVisible(POTable.getCellRect(i, 0, true));
                found = true;
            }
        }

        if (!found) {
            JOptionPane.showMessageDialog(this, "Purchase Order not found!");
            loadPurchaseOrders();
            SearchTF.setText("");
        }
    }
        
    private void filterPurchaseOrder(String status) {
        boolean found = false;
        DefaultTableModel model = (DefaultTableModel) POTable.getModel();
        model.setRowCount(0);
        String searchKeyword = SearchTF.getText().trim();

        for (String[] line : FileReaderUtil.readFileAsArrays("purchase_orders.txt")) {
            boolean statusMatch = line[7].equalsIgnoreCase(status);
            boolean searchMatch = searchKeyword.isEmpty() || 
                                  line[0].equals(searchKeyword) || 
                                  line[1].equals(searchKeyword) || 
                                  line[2].equals(searchKeyword) || 
                                  line[4].equals(searchKeyword);

            if (statusMatch && searchMatch) {
                model.addRow(new Object[]{line[0], line[1], line[2], line[3],
                                          line[4], line[5], line[6], line[7]});
                found = true;
            }
        }

        if (!found) {
            JOptionPane.showMessageDialog(this, "No Purchase Orders found with status: " + status);
            model.setRowCount(0); 
            loadPurchaseOrders();
            SearchTF.setText("");
        }
    }



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CloseButton;
    private javax.swing.JComboBox<String> Filter;
    private javax.swing.JTable POTable;
    private javax.swing.JButton RefreshButton;
    private javax.swing.JButton SearchButton;
    private javax.swing.JTextField SearchTF;
    private javax.swing.JLabel Title;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
