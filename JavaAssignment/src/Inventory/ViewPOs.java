/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Inventory;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.util.List;
import javax.swing.table.DefaultTableCellRenderer;
import PurchaseManager.*;
import main.*;


/**
 *
 * @author limsh
 */
public class ViewPOs extends javax.swing.JFrame {

    /**
     * Creates new form ViewPOs
     */
    public ViewPOs() {
        initComponents();
        ((javax.swing.table.DefaultTableCellRenderer) POTable.getTableHeader().getDefaultRenderer())
            .setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        centerTableText();
        POTable.setRowHeight(30);
        loadPurchaseOrders();
        setLocationRelativeTo(null);
        getContentPane().setBackground(new java.awt.Color(0xc5e1ef));

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Title = new javax.swing.JLabel();
        RefreshButton = new javax.swing.JButton();
        SearchButton = new javax.swing.JButton();
        SearchTF = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        POTable = new javax.swing.JTable();
        CloseButton = new javax.swing.JButton();
        Filter = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Title.setFont(new java.awt.Font("Times New Roman", 1, 48)); // NOI18N
        Title.setText("Purchase Orders");

        RefreshButton.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        RefreshButton.setText("Refresh ");
        RefreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RefreshButtonActionPerformed(evt);
            }
        });

        SearchButton.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        SearchButton.setText("Search");
        SearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchButtonActionPerformed(evt);
            }
        });

        SearchTF.setColumns(15);
        SearchTF.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        SearchTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchTFActionPerformed(evt);
            }
        });

        POTable.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        POTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "PO ID", "PR ID", "ITEM CODE", "QUANTITY", "SUPPLIER ID", "PURCHASE MANAGER ID", "DATE", "STATUS"
            }
        ));
        jScrollPane1.setViewportView(POTable);

        CloseButton.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        CloseButton.setText("Menu");
        CloseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CloseButtonActionPerformed(evt);
            }
        });

        Filter.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        Filter.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All", "Updated", "Approved", "Pending" }));
        Filter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FilterActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(RefreshButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(SearchTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(SearchButton)
                                .addGap(18, 18, 18)
                                .addComponent(Filter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 692, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(CloseButton)
                        .addGap(135, 135, 135)
                        .addComponent(Title)))
                .addContainerGap(55, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(CloseButton)
                    .addComponent(Title, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(SearchButton)
                                .addComponent(Filter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(SearchTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(RefreshButton))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 365, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void RefreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RefreshButtonActionPerformed
        loadPurchaseOrders();
        JOptionPane.showMessageDialog(this, "Purchase Orders refreshed successfully!", "Information", JOptionPane.INFORMATION_MESSAGE);// TODO add your handling code here:
    }//GEN-LAST:event_RefreshButtonActionPerformed

    private void CloseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CloseButtonActionPerformed
        new Dashboard().setVisible(true);  // Open Dashboard GUI
        this.dispose();  // TODO add your handling code here:
    }//GEN-LAST:event_CloseButtonActionPerformed

    private void SearchTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchTFActionPerformed
        searchPurchaseOrder();// TODO add your handling code here:
    }//GEN-LAST:event_SearchTFActionPerformed

    private void FilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FilterActionPerformed
        loadPurchaseOrders();// TODO add your handling code here:
    }//GEN-LAST:event_FilterActionPerformed

    private void SearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchButtonActionPerformed
        searchPurchaseOrder();// TODO add your handling code here:
    }//GEN-LAST:event_SearchButtonActionPerformed
                                      

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewPOs.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewPOs.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewPOs.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewPOs.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ViewPOs().setVisible(true);
            }
        });
    }
    
    private void centerTableText() {
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(Title.CENTER);

        // Apply to each column
        for (int i = 0; i < POTable.getColumnCount(); i++) {
            POTable.getColumnModel().getColumn(i).setCellRenderer(centerRenderer);
        }
    }
    
    private void loadPurchaseOrders() {
        DefaultTableModel model = (DefaultTableModel) POTable.getModel();
        model.setRowCount(0);  // Clear table

        String selectedStatus = Filter.getSelectedItem().toString();

        List<String[]> rawData = FileReaderUtil.readFile("purchase_orders.txt");

        for (String[] parts : rawData) {
            if (parts.length == 8) {
                PurchaseOrder po = new PurchaseOrder(
                    parts[0], parts[1], parts[2], Integer.parseInt(parts[3]),
                    parts[4], parts[5], parts[6], parts[7]
                );

                if (selectedStatus.equals("All") || po.getStatus().equalsIgnoreCase(selectedStatus)) {
                    model.addRow(new Object[] {
                        po.getPoID(), po.getPrID(), po.getItemCode(), po.getQuantity(),
                        po.getSupplierID(), po.getPurchaseManagerID(), po.getDate(), po.getStatus()
                    });
                }
            }
        }
    }

    private void searchPurchaseOrder() {
        String searchText = SearchTF.getText().trim().toLowerCase();
        DefaultTableModel model = (DefaultTableModel) POTable.getModel();
        boolean found = false;
        
        if(searchText.isEmpty()){
            JOptionPane.showMessageDialog(this, "Please insert Item ID or Name!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }   

        for (int i = 0; i < model.getRowCount(); i++) {
            String poId = model.getValueAt(i, 0).toString().toLowerCase();  // PO ID
            String itemCode = model.getValueAt(i, 2).toString().toLowerCase();  // Item Code

            if (poId.equalsIgnoreCase(searchText) || itemCode.equalsIgnoreCase(searchText)) {
                POTable.setRowSelectionInterval(i, i);  // Highlight the row
                POTable.scrollRectToVisible(POTable.getCellRect(i, 0, true));  // Scroll to row
                found = true;
                break;
            }
        }

        if (!found) {
            JOptionPane.showMessageDialog(this, "Purchase Order not found!", "Search", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CloseButton;
    private javax.swing.JComboBox<String> Filter;
    private javax.swing.JTable POTable;
    private javax.swing.JButton RefreshButton;
    private javax.swing.JButton SearchButton;
    private javax.swing.JTextField SearchTF;
    private javax.swing.JLabel Title;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
