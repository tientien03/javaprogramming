/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Inventory;


import salesManager.*;
import javax.swing.table.DefaultTableCellRenderer;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;
import javax.swing.table.DefaultTableModel;
import java.awt.Component;
import java.awt.Color;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingConstants;

/**
 *
 * @author limsh
 */
public class StockAlerts extends javax.swing.JFrame {

    /**
     * Creates new form StockAlerts
     */
    public StockAlerts() {
        initComponents();
        ItemTable.setRowHeight(30);
        getContentPane().setBackground(new java.awt.Color(0xc5e1ef));
        
        SearchItem.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                SearchButtonActionPerformed(evt);  // Reuse button logic
            }
        });
        
        ((javax.swing.table.DefaultTableCellRenderer) ItemTable.getTableHeader().getDefaultRenderer())
            .setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        setLocationRelativeTo(null);
        applySearchAndFilter();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Title = new javax.swing.JLabel();
        SearchButton = new javax.swing.JButton();
        RefreshButton = new javax.swing.JButton();
        SearchItem = new javax.swing.JTextField();
        Filter = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        ItemTable = new javax.swing.JTable();
        CloseButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Title.setFont(new java.awt.Font("Times New Roman", 1, 48)); // NOI18N
        Title.setText("Stock Alerts");

        SearchButton.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        SearchButton.setText("Search");
        SearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchButtonActionPerformed(evt);
            }
        });

        RefreshButton.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        RefreshButton.setText("Refresh");
        RefreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RefreshButtonActionPerformed(evt);
            }
        });

        SearchItem.setColumns(15);
        SearchItem.setFont(new java.awt.Font("Times New Roman", 0, 17)); // NOI18N

        Filter.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        Filter.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All Stock", "Low Stock", "In Stock", "Overstocked" }));
        Filter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FilterActionPerformed(evt);
            }
        });

        ItemTable.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        ItemTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ITEM ID", "ITEM NAME", "SUPPLIER ID", "PRICE", "STOCK", "STATUS"
            }
        ));
        jScrollPane1.setViewportView(ItemTable);

        CloseButton.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        CloseButton.setText("Menu");
        CloseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CloseButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(CloseButton)
                        .addGap(165, 165, 165)
                        .addComponent(Title))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 685, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(RefreshButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(SearchItem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(SearchButton)
                                .addGap(18, 18, 18)
                                .addComponent(Filter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(62, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(CloseButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(34, Short.MAX_VALUE)
                        .addComponent(Title)
                        .addGap(18, 18, 18)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SearchItem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SearchButton)
                    .addComponent(Filter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(RefreshButton))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 351, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void RefreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RefreshButtonActionPerformed
        applySearchAndFilter();
        JOptionPane.showMessageDialog(this, "Refresh Items successfully!", "Information", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_RefreshButtonActionPerformed

    private void SearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchButtonActionPerformed
        applySearchAndFilter();// TODO add your handling code here:
    }//GEN-LAST:event_SearchButtonActionPerformed

    private void FilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FilterActionPerformed
        applySearchAndFilter();
        // TODO add your handling code here:
    }//GEN-LAST:event_FilterActionPerformed

    private void CloseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CloseButtonActionPerformed
        new Dashboard().setVisible(true);  // Open Dashboard GUI
        this.dispose();// TODO add your handling code here:
    }//GEN-LAST:event_CloseButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StockAlerts.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StockAlerts.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StockAlerts.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StockAlerts.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new StockAlerts().setVisible(true);
            }
        });
    }
    
    private void applySearchAndFilter() {
        String selectedFilter = Filter.getSelectedItem().toString();
        String searchText = SearchItem.getText().trim().toLowerCase();
        
        DefaultTableModel model = (DefaultTableModel) ItemTable.getModel();
        model.setRowCount(0); 

        List<Supplier> supplierList = Supplier.loadSupplierFromFile("supplier.txt");
        List<Item> itemList = Item.loadItemFromFile("item.txt", supplierList);
        for (Item item : itemList) {
            int stock = item.getStock();
            String status;

            if (stock < 25) {
                status = "Low Stock";
            } else if (stock <= 75) {
                status = "In Stock";
            } else {
                status = "Overstocked";
            }
            
            String itemId = item.getItemID().toLowerCase();
            String itemName = item.getItemName().toLowerCase();

            boolean matchesSearch = searchText.isEmpty() || itemId.contains(searchText) || itemName.contains(searchText);
            boolean matchesFilter = selectedFilter.equals("All Stock") || status.equals(selectedFilter);

            if (matchesSearch && matchesFilter) {
                model.addRow(new Object[]{
                    item.getItemID(),
                    item.getItemName(),
                    String.join(";", item.getSupplierids()),
                    String.format("%.2f", item.getPrice()),
                    stock,
                    status
                });
            }
        }

        colorizeRows();
        centerAllColumns();
    }
    
    private void colorizeRows() {
        ItemTable.getColumnModel().getColumn(5).setCellRenderer(new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value,
                    boolean isSelected, boolean hasFocus, int row, int column) {

                Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                String status = value.toString();
                
                setHorizontalAlignment(CENTER);
                
                if (!isSelected) { // Optional: preserve selection highlight
                    switch (status) {
                        case "Low Stock" -> c.setBackground(new Color(255, 102, 102));      // Red
                        case "In Stock" -> c.setBackground(new Color(153, 255, 153));       // Green
                        case "Overstocked" -> c.setBackground(new Color(255, 255, 153));    // Yellow
                        default -> c.setBackground(Color.WHITE);
                    }
                }

                return c;
            }
        });
    }
    
    private void searchItemInTable() {
        String searchText = SearchItem.getText().trim().toLowerCase();
        DefaultTableModel model = (DefaultTableModel) ItemTable.getModel();
        boolean found = false;
        
        if(searchText.isEmpty()){
            JOptionPane.showMessageDialog(this, "Please insert Item ID or Name!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }   

        for (int i = 0; i < model.getRowCount(); i++) {
            String itemId = model.getValueAt(i, 0).toString().toLowerCase(); // Item ID column
            String itemName = model.getValueAt(i, 1).toString().toLowerCase(); // Item Name column

            if (itemId.equalsIgnoreCase(searchText) || itemName.equalsIgnoreCase(searchText)) {
                ItemTable.setRowSelectionInterval(i, i);  // Select matching row
                ItemTable.scrollRectToVisible(ItemTable.getCellRect(i, 0, true));  // Scroll to it
                found = true;
                break;
            }
        }
        if(!found){
            JOptionPane.showMessageDialog(this, "Item not found!");
        }
    }
    
    private void centerAllColumns() {
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(SwingConstants.CENTER);
        
        for(int i = 0; i< ItemTable.getColumnCount(); i++){
            if(i != 5){
                ItemTable.getColumnModel().getColumn(i).setCellRenderer(centerRenderer);
            }
        }
    }



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CloseButton;
    private javax.swing.JComboBox<String> Filter;
    private javax.swing.JTable ItemTable;
    private javax.swing.JButton RefreshButton;
    private javax.swing.JButton SearchButton;
    private javax.swing.JTextField SearchItem;
    private javax.swing.JLabel Title;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
