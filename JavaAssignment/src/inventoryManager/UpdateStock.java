/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package inventoryManager;

import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.util.*;
import inventoryManager.InventoryUpdateStock;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.JOptionPane;

/**
 *
 * @author limsh
 */
public class UpdateStock extends javax.swing.JFrame {

    /**
     * Creates new form UpdateStock
     */
    public UpdateStock() {
        initComponents();
        ((javax.swing.table.DefaultTableCellRenderer) POTable.getTableHeader().getDefaultRenderer())
            .setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        centerTableText();
        
        POTable.setRowHeight(30);
        this.setLocationRelativeTo(null); 
        getContentPane().setBackground(new java.awt.Color(0xc5e1ef));
        
        inventoryManager.InventoryUpdateStock loader = new inventoryManager.InventoryUpdateStock();
        List<String[]> approvedPOs = loader.loadApprovedPOs();

        DefaultTableModel model = (DefaultTableModel) POTable.getModel();
        model.setRowCount(0);
        searchTF.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                SearchButtonActionPerformed(evt);  // Reuse button logic
            }
        });

        
        for (String[] row : approvedPOs) {
            model.addRow(new Object[]{ row[0], row[2], row[3], row[4], row[6]});
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Title = new javax.swing.JLabel();
        UpdateButton = new javax.swing.JButton();
        RefreshButton = new javax.swing.JButton();
        CloseButton = new javax.swing.JButton();
        SearchButton = new javax.swing.JButton();
        searchTF = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        POTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        Title.setFont(new java.awt.Font("Times New Roman", 1, 48)); // NOI18N
        Title.setText("Update Stock");

        UpdateButton.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        UpdateButton.setText("Update Stock");
        UpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateButtonActionPerformed(evt);
            }
        });

        RefreshButton.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        RefreshButton.setText("Refresh");
        RefreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RefreshButtonActionPerformed(evt);
            }
        });

        CloseButton.setBackground(new java.awt.Color(255, 204, 204));
        CloseButton.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        CloseButton.setText("MENU");
        CloseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CloseButtonActionPerformed(evt);
            }
        });

        SearchButton.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        SearchButton.setText("Search");
        SearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchButtonActionPerformed(evt);
            }
        });

        searchTF.setColumns(15);
        searchTF.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        searchTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchTFActionPerformed(evt);
            }
        });

        POTable.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        POTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "PO ID", "ITEM ID", "QUANTITY", "SUPPLIER ID", "DATE"
            }
        ));
        jScrollPane1.setViewportView(POTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap(49, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(RefreshButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(searchTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(SearchButton))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 705, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(UpdateButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(CloseButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Title)
                        .addGap(211, 211, 211)))
                .addContainerGap(46, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(Title))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(CloseButton)))
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SearchButton)
                    .addComponent(RefreshButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(UpdateButton)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CloseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CloseButtonActionPerformed
        new Dashboard().setVisible(true);  // Open Dashboard GUI
        this.dispose();// TODO add your handling code here:
    }//GEN-LAST:event_CloseButtonActionPerformed

    private void UpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateButtonActionPerformed
        int selectedRow = POTable.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a PO to update stock.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        String poID = POTable.getValueAt(selectedRow, 0).toString();
        String itemID = POTable.getValueAt(selectedRow, 1).toString();
        int quantityToAdd = Integer.parseInt(POTable.getValueAt(selectedRow, 2).toString());

        int confirm = JOptionPane.showConfirmDialog(this,"Confirm update stock for PO: " + poID + "?", "Confirmation", JOptionPane.YES_NO_OPTION);
        if (confirm != JOptionPane.YES_OPTION){
            return;
        }
        InventoryUpdateStock updater = new InventoryUpdateStock();
        updater.updateItemStock(itemID, quantityToAdd);
        updater.updatePurchaseOrderStatus(poID);
        RefreshButtonActionPerformed(null);
    }//GEN-LAST:event_UpdateButtonActionPerformed

    private void RefreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RefreshButtonActionPerformed
        DefaultTableModel model = (DefaultTableModel) POTable.getModel();
        model.setRowCount(0); // Clear table

        inventoryManager.InventoryUpdateStock loader = new inventoryManager.InventoryUpdateStock();
        List<String[]> approvedPOs = loader.loadApprovedPOs();

        for (String[] row : approvedPOs) {
            model.addRow(new Object[]{ row[0], row[2], row[3], row[4], row[6] });
        }
        searchTF.setText("");
        JOptionPane.showMessageDialog(this, "Approved Purchase Orders loaded successfully!", "Refresh", JOptionPane.INFORMATION_MESSAGE);// TODO add your handling code here:
    }//GEN-LAST:event_RefreshButtonActionPerformed

    private void searchTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchTFActionPerformed

    private void SearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchButtonActionPerformed
        String searchText = searchTF.getText().trim().toLowerCase();
        DefaultTableModel model = (DefaultTableModel) POTable.getModel();

        if (searchText.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please insert PO ID or Item ID!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        boolean found = false;

        for (int i = 0; i < model.getRowCount(); i++) {
            String poId = model.getValueAt(i, 0).toString().toLowerCase();  // PO ID
            String itemId = model.getValueAt(i, 1).toString().toLowerCase(); // ITEM ID

            if (poId.equals(searchText) || itemId.equals(searchText)) {
                POTable.setRowSelectionInterval(i, i);
                POTable.scrollRectToVisible(POTable.getCellRect(i, 0, true));
                found = true;
                break;
            }
        }

        if (!found) {
            JOptionPane.showMessageDialog(this, "Purchase Order not found!", "Search", JOptionPane.INFORMATION_MESSAGE);
            searchTF.setText("");
        }// TODO add your handling code here:
    }//GEN-LAST:event_SearchButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UpdateStock.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UpdateStock.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UpdateStock.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UpdateStock.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UpdateStock().setVisible(true);
            }
        });
    }
    private void centerTableText() {
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(Title.CENTER);

        // Apply to each column
        for (int i = 0; i < POTable.getColumnCount(); i++) {
            POTable.getColumnModel().getColumn(i).setCellRenderer(centerRenderer);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CloseButton;
    private javax.swing.JTable POTable;
    private javax.swing.JButton RefreshButton;
    private javax.swing.JButton SearchButton;
    private javax.swing.JLabel Title;
    private javax.swing.JButton UpdateButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField searchTF;
    // End of variables declaration//GEN-END:variables
}
